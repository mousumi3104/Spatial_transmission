for (m in 1:M_regions) {
# for (i in 1:4){
for (t in 1:final_time){
if (is.nan(gmobility[t,i,m])){
prev_val <- if (t > 1) gmobility[max(which(!is.nan(gmobility[1:(t-1),3,m] )))]
next_val <- if (t < final_time) gmobility[min(which(!is.nan(gmobility[(t+1):final_time,3,m]))) + t]
}
gmobility[t,i,m] <- mean(prev_val,next_val)
}
# }
}
for (m in 1:M_regions) {
# for (i in 1:4){
for (t in 1:final_time){
if (is.nan(gmobility[t,3,m])){
prev_val <- if (t > 1) gmobility[max(which(!is.nan(gmobility[1:(t-1),3,m] )))]
next_val <- if (t < final_time) gmobility[min(which(!is.nan(gmobility[(t+1):final_time,3,m]))) + t]
}
gmobility[t,i,m] <- mean(prev_val,next_val)
}
# }
}
for (m in 1:M_regions) {
# for (i in 1:4){
for (t in 1:final_time){
if (is.nan(gmobility[t,3,m])){
prev_val <- if (t > 1) gmobility[max(which(!is.nan(gmobility[1:(t-1),3,m] ))),3,m]
next_val <- if (t < final_time) gmobility[min(which(!is.nan(gmobility[(t+1):final_time,3,m]))) + t,3,m]
}
gmobility[t,i,m] <- mean(prev_val,next_val)
}
# }
}
for (m in 1:M_regions) {
# for (i in 1:4){
for (t in 1:final_time){
if (is.nan(gmobility[t,3,m])){
prev_val <- if (t > 1) gmobility[max(which(!is.nan(gmobility[1:(t-1),3,m] ))),3,m]
# next_val <- if (t < final_time) gmobility[min(which(!is.nan(gmobility[(t+1):final_time,3,m]))) + t,3,m]
}
# gmobility[t,i,m] <- mean(prev_val,next_val)
}
# }
}
for (m in 1:M_regions) {
# for (i in 1:4){
for (t in 1:final_time){
if (is.nan(gmobility[t,3,m])){
prev_val <- if (t > 1) gmobility[max(which(!is.nan(gmobility[1:(t-1),3,m] ))),3,m]
next_val <- if (t < final_time) gmobility[min(which(!is.nan(gmobility[(t+1):final_time,3,m]))) + t,3,m]
}
# gmobility[t,i,m] <- mean(prev_val,next_val)
}
# }
}
for (m in 1:M_regions) {
# for (i in 1:4){
for (t in 1:final_time){
if (is.nan(gmobility[t,3,m])){
prev_val <- if (t > 1) gmobility[max(which(!is.nan(gmobility[1:(t-1),3,m] ))),3,m]
next_val <- if (t < final_time) gmobility[min(which(!is.nan(gmobility[(t+1):final_time,3,m]))) + t,3,m]
}
gmobility[t,3,m] <- mean(prev_val,next_val)
}
# }
}
for (m in 1:M_regions) {
for (i in 1:4){
for (t in 1:final_time){
if (is.nan(gmobility[t,i,m])){
prev_val <- if (t > 1) gmobility[max(which(!is.nan(gmobility[1:(t-1),i,m] ))),i,m]
next_val <- if (t < final_time) gmobility[min(which(!is.nan(gmobility[(t+1):final_time,i,m]))) + t,i,m]
}
gmobility[t,i,m] <- mean(prev_val,next_val)
}
}
}
View(gmobility[,,1])
gmobility <- array(NA, dim = c(final_time,5,M_regions))
for (i in 1:M_regions){
gmobility[,,i] <- as.matrix(mobility_change_region[(((i-1)*final_time)+1):(i*final_time),3:7])
}
View(gmobility[,,1])
for (m in 1:M_regions) {
for (i in 1:4){
for (t in 1:final_time){
if (is.nan(gmobility[t,i,m])){
prev_val <- if (t > 1) gmobility[max(which(!is.nan(gmobility[1:(t-1),i,m] ))),i,m]
next_val <- if (t < final_time) gmobility[(min(which(!is.nan(gmobility[(t+1):final_time,i,m]))) + t),i,m]
}
gmobility[t,i,m] <- mean(prev_val,next_val)
}
}
}
View(gmobility[,,1])
View(gmobility[,,2])
gmobility <- array(NA, dim = c(final_time,5,M_regions))
for (i in 1:M_regions){
gmobility[,,i] <- as.matrix(mobility_change_region[(((i-1)*final_time)+1):(i*final_time),3:7])
}
for (m in 1:M_regions) {
for (t in 1:final_time){
if (is.nan(gmobility[t,3,m])){
prev_val <- if (t > 1) gmobility[max(which(!is.nan(gmobility[1:(t-1),3,m] ))),3,m]
next_val <- if (t < final_time) gmobility[(min(which(!is.nan(gmobility[(t+1):final_time,3,m]))) + t),3,m]
}
# gmobility[t,i,m] <- mean(prev_val,next_val)
}
}
View(gmobility[,,2])
gmobility <- array(NA, dim = c(final_time,5,M_regions))
for (i in 1:M_regions){
gmobility[,,i] <- as.matrix(mobility_change_region[(((i-1)*final_time)+1):(i*final_time),3:7])
}
View(gmobility[,,2])
gmobility <- array(NA, dim = c(final_time+1,5,M_regions))
for (i in 1:M_regions){
gmobility[,,i] <- as.matrix(mobility_change_region[(((i-1)*final_time)+2):((i*final_time)+1),3:7])
}
final_time
gmobility <- array(NA, dim = c(final_time+1,5,M_regions))
dim(gmobility)
for (i in 1:M_regions){
gmobility[,,i] <- as.matrix(mobility_change_region[(((i-1)*(final_time+1))+1):(i*(final_time+1)),3:7])
}
View(gmobility[,,2])
for (m in 1:M_regions) {
for (t in 1:final_time){
if (is.nan(gmobility[t,3,m])){
prev_val <- if (t > 1) gmobility[max(which(!is.nan(gmobility[1:(t-1),3,m] ))),3,m]
next_val <- if (t < final_time) gmobility[(min(which(!is.nan(gmobility[(t+1):final_time,3,m]))) + t),3,m]
}
# gmobility[t,i,m] <- mean(prev_val,next_val)
}
}
View(gmobility[,,2])
View(gmobility[,,1])
for (m in 1:M_regions) {
for (t in 1:final_time){
if (is.nan(gmobility[t,3,m])){
prev_val <- if (t > 1) gmobility[max(which(!is.nan(gmobility[1:(t-1),3,m] ))),3,m]
next_val <- if (t < final_time) gmobility[(min(which(!is.nan(gmobility[(t+1):final_time,3,m]))) + t),3,m]
}
gmobility[t,i,m] <- (prev_val +next_val)/2
}
}
for (m in 1:M_regions) {
for (t in 1:final_time){
if (is.nan(gmobility[t,3,m])){
prev_val <- if (t > 1) gmobility[max(which(!is.nan(gmobility[1:(t-1),3,m] ))),3,m]
next_val <- if (t < final_time) gmobility[(min(which(!is.nan(gmobility[(t+1):final_time,3,m]))) + t),3,m]
}
gmobility[t,3,m] <- (prev_val +next_val)/2
}
}
View(gmobility[,,1])
is.na(gmobility)
sum(is.na(gmobility))
sum(is.nan(gmobility))
gmobility <- array(NA, dim = c(final_time+1,5,M_regions))
for (i in 1:M_regions){
gmobility[,,i] <- as.matrix(mobility_change_region[(((i-1)*(final_time+1))+1):(i*(final_time+1)),3:7])
}
for (m in 1:M_regions) {
for (i in 1:4){
for (t in 1:final_time){
if (is.nan(gmobility[t,i,m])){
prev_val <- if (t > 1) gmobility[max(which(!is.nan(gmobility[1:(t-1),i,m] ))),i,m]
next_val <- if (t < final_time) gmobility[(min(which(!is.nan(gmobility[(t+1):final_time,i,m]))) + t),i,m]
}
gmobility[t,i,m] <- (prev_val +next_val)/2
}
}
}
View(gmobility[,,1])
View(gmobility[,,2])
mobility_change <- readRDS("data/mobility_change.rds")
mobility_change <- mobility_change %>%
group_by(area_name, date, region) %>%
summarize(avg_retail_and_recreation_percent_change_from_baseline = mean(retail_and_recreation_percent_change_from_baseline, na.rm = TRUE),
ave_grocery_and_pharmacy_percent_change_from_baseline = mean(grocery_and_pharmacy_percent_change_from_baseline, na.rm = TRUE),
ave_parks_percent_change_from_baseline = mean(parks_percent_change_from_baseline, na.rm = TRUE),
ave_transit_stations_percent_change_from_baseline = mean(transit_stations_percent_change_from_baseline, na.rm = TRUE),
ave_workplaces_percent_change_from_baseline = mean(workplaces_percent_change_from_baseline, na.rm = TRUE))
mobility_change_region <- mobility_change %>%
group_by(region, date) %>%
summarize(avg_retail_and_recreation_percent_change_from_baseline = mean(avg_retail_and_recreation_percent_change_from_baseline, na.rm = TRUE),
ave_grocery_and_pharmacy_percent_change_from_baseline = mean(ave_grocery_and_pharmacy_percent_change_from_baseline, na.rm = TRUE),
ave_parks_percent_change_from_baseline = mean(ave_parks_percent_change_from_baseline, na.rm = TRUE),
ave_transit_stations_percent_change_from_baseline = mean(ave_transit_stations_percent_change_from_baseline, na.rm = TRUE),
ave_workplaces_percent_change_from_baseline = mean(ave_workplaces_percent_change_from_baseline, na.rm = TRUE),.groups = "keep")
mobility_change_region$date <- as.Date(mobility_change_region$date, format = "%Y-%m-%d")
if (min(mobility_change_region$date) > inf_start_date){
new_dates <- seq.Date(from = inf_start_date, to = min(mobility_change_region$date), by = "day")
new_rows <- expand.grid(region = unique(mobility_change_region$region), date = new_dates)
new_rows <- new_rows %>% mutate(avg_retail_and_recreation_percent_change_from_baseline = 0,
ave_grocery_and_pharmacy_percent_change_from_baseline = 0,
ave_parks_percent_change_from_baseline = 0,
ave_transit_stations_percent_change_from_baseline = 0,
ave_workplaces_percent_change_from_baseline = 0)
}
mobility_change_region <- rbind(new_rows, mobility_change_region)
desired_order_region <- pop_region$regions
mobility_change_region$region <- factor(mobility_change_region$region, levels = desired_order_region)
mobility_change_region <- mobility_change_region %>% arrange(region)
gmobility <- array(NA, dim = c(final_time+1,5,M_regions))
for (i in 1:M_regions){
gmobility[,,i] <- as.matrix(mobility_change_region[(((i-1)*(final_time+1))+1):(i*(final_time+1)),3:7])
}
for (m in 1:M_regions) {
for (i in 1:4){
for (t in 1:final_time){
if (is.nan(gmobility[t,i,m])){
prev_val <- if (t > 1) gmobility[max(which(!is.nan(gmobility[1:(t-1),i,m] ))),i,m]
next_val <- if (t < final_time) gmobility[(min(which(!is.nan(gmobility[(t+1):final_time,i,m]))) + t),i,m]
}
gmobility[t,i,m] <- (prev_val +next_val)/2
}
}
}
View(gmobility[,,2])
gmobility <- array(NA, dim = c(final_time+1,5,M_regions))
for (i in 1:M_regions){
gmobility[,,i] <- as.matrix(mobility_change_region[(((i-1)*(final_time+1))+1):(i*(final_time+1)),3:7])
}
View(gmobility[,,2])
for (m in 1:M_regions) {
for (i in 1:4){
for (t in 1:(final_time+1)){
if (is.nan(gmobility[t,i,m])){
print(10)
prev_val <- if (t > 1) gmobility[max(which(!is.nan(gmobility[1:(t-1),i,m] ))),i,m]
next_val <- if (t < final_time) gmobility[(min(which(!is.nan(gmobility[(t+1):final_time,i,m]))) + t),i,m]
}
print( (prev_val +next_val)/2)
}
}
}
for (m in 1:M_regions) {
for (i in 1:4){
for (t in 1:(final_time+1)){
if (is.nan(gmobility[t,i,m])){
prev_val <- if (t > 1) gmobility[max(which(!is.nan(gmobility[1:(t-1),i,m] ))),i,m]
next_val <- if (t < final_time) gmobility[(min(which(!is.nan(gmobility[(t+1):final_time,i,m]))) + t),i,m]
gmobility[t,i,m] <- (prev_val +next_val)/2)
for (m in 1:M_regions) {
for (i in 1:4){
for (t in 1:(final_time+1)){
if (is.nan(gmobility[t,i,m])){
prev_val <- if (t > 1) gmobility[max(which(!is.nan(gmobility[1:(t-1),i,m] ))),i,m]
next_val <- if (t < final_time) gmobility[(min(which(!is.nan(gmobility[(t+1):final_time,i,m]))) + t),i,m]
gmobility[t,i,m] <- (prev_val +next_val)/2
}
}
}
}
View(gmobility[,,2])
lockdown1_started <- as.Date("2020-03-23", format = "%Y-%m-%d")
lockdown1_lifted <- as.Date("2020-05-10", format = "%Y-%m-%d")
lockdown2_started <- as.Date("2020-11-05", format = "%Y-%m-%d")
lockdown2_lifted <- as.Date("2020-12-02", format = "%Y-%m-%d")
lockdown_index <-  data.frame(date = seq.Date(from = inf_start_date,as.Date("2020-12-31",format = "%Y-%m-%d"),by="day"))
lockdown_index$r_mobility_index <- rep(0,nrow(lockdown_index))
lockdown_index$r_mobility_index[lockdown_index$date >= lockdown1_started & lockdown_index$date <= lockdown1_lifted] <- 1
lockdown_index$r_mobility_index[lockdown_index$date >= lockdown2_started & lockdown_index$date <= lockdown2_lifted] <- 1
lockdown_index$g_mobility_index <-  rep(3,nrow(lockdown_index))
lockdown_index$g_mobility_index[lockdown_index$date <= lockdown1_lifted] <- 1
lockdown_index$g_mobility_index[lockdown_index$date >= lockdown1_lifted & lockdown_index$date <= lockdown2_lifted] <- 2
lockdown_index$L1 <- ifelse(lockdown_index$g_mobility_index == 1,1,0)
lockdown_index$L2 <- ifelse(lockdown_index$g_mobility_index == 2,1,0)
lockdown_index$L3 <- ifelse(lockdown_index$g_mobility_index == 3,1,0)
lockdown_index <- lockdown_index %>% select(- g_mobility_index, -date)
day_week_index <- array(0,final_time)
for (t in 1:final_time){
day_week_index[t] = ceiling(t/7) -(fitting_death_start - epidemic_start - 1)
}
day_week_index[1:((fitting_death_start-epidemic_start)*7)] = 1
week <- day_week_index[length(day_week_index)]
#-----------------------------------------------------------------------------------------------
si <- rep(0,final_time)
si[1] = integrate(function(x) dgamma(x,shape=6.5, rate=0.62), lower=0, upper=1.5)$value
for (i in 2:final_time){
si[i] <- integrate(function(x) dgamma(x,shape=6.5, rate=0.62), lower=i-0.5, upper=i+0.5)$value
}
mean1 <- 5.1; cv1 <- 0.86; mean2 <-17.8 ; cv2 <- 0.45;
x1 <- rgammaAlt(1e6,mean1,cv1)
x2 <- rgammaAlt(1e6,mean2,cv2)
f <- rep(0,final_time)
f_cached <- ecdf(x1+x2)
convolution <- function(u) (0.0103*f_cached(u))      # ifr is 0.0103.  # this is the ifr for uk from the code of swapnil's NPI nature
f[1] = (convolution(1.5) - convolution(0))
for(i in 2:final_time) {
f[i] = (convolution(i+.5) - convolution(i-.5))
}
f_case <- rep(0,final_time)
f_case[1] = integrate(function(x) dgammaAlt(x,mean=5.1, cv=0.86), lower=0, upper=1.5)$value
for (i in 2:final_time){
f_case[i] <- integrate(function(x) dgammaAlt(x,mean=5.1, cv=0.86), lower=i-0.5, upper=i+0.5)$value
}
stan_data <- list(M_regions= M_regions,
final_time=final_time,
W = week,
gmobility = gmobility
# initial_seeding_day = initial_seeding_day,
# death_data_length = death_len_data,
# death= as.matrix(death_regions,death_len_data,M_regions),
# SI=si,
# f=f,
# f1 = f_case,
# pop=pop,
# C_base=C_base,
# C_lockdown = C_lockdown,
# day_week_index = day_week_index,
# I = lockdown_index,
# fitting_death_start = fitting_death_start
)
# options(mc.cores = parallel::detectCores())
# rstan_options(auto_write = TRUE)
# Example in R using rstan
m <- cmdstan_model("fitting_regions.stan")
fit <- m$sample(
data=stan_data,
iter_sampling = 10,
iter_warmup = 10,
parallel_chains = 4,
chains=4,
thin=1,
seed=12345,
refresh = 20,
adapt_delta = 0.8,
max_treedepth = 10,fixed_param = TRUE)     # adapt_delta controls acceptance probability (lower -> larger step size, higher acceptance rate, less time, less explored posterior distribution
stan_data <- list(M_regions= M_regions,
final_time=final_time,
W = week,
gmobility = gmobility,
initial_seeding_day = initial_seeding_day,
death_data_length = death_len_data,
death= as.matrix(death_regions,death_len_data,M_regions),
SI=si,
f=f,
f1 = f_case,
pop=pop,
C_base=C_base,
C_lockdown = C_lockdown,
day_week_index = day_week_index,
I = lockdown_index,
fitting_death_start = fitting_death_start
)
# Example in R using rstan
m <- cmdstan_model("fitting_regions.stan")
fit <- m$sample(
data=stan_data,
iter_sampling = 10,
iter_warmup = 10,
parallel_chains = 4,
chains=4,
thin=1,
seed=12345,
refresh = 20,
adapt_delta = 0.8,
max_treedepth = 10,fixed_param = TRUE)     # adapt_delta controls acceptance probability (lower -> larger step size, higher acceptance rate, less time, less explored posterior distribution
stan_data <- list(M_regions= M_regions,
final_time=final_time,
W = week,
gmobility = gmobility,
initial_seeding_day = initial_seeding_day,
death_data_length = death_len_data,
death= as.matrix(death_regions,death_len_data,M_regions),
SI=si,
f=f,
f1 = f_case,
pop=pop,
C_base=C_base,
C_lockdown = C_lockdown,
day_week_index = day_week_index,
I = lockdown_index,
fitting_death_start = fitting_death_start
)
# Example in R using rstan
m <- cmdstan_model("fitting_regions.stan")
stan_data <- list(M_regions= M_regions,
final_time=final_time,
W = week,
gmobility = gmobility,
initial_seeding_day = initial_seeding_day,
death_data_length = death_len_data,
death= as.matrix(death_regions,death_len_data,M_regions),
SI=si,
f=f,
f1 = f_case,
pop=pop,
C_base=C_base,
C_lockdown = C_lockdown,
day_week_index = day_week_index,
I = lockdown_index,
fitting_death_start = fitting_death_start
)
# Example in R using rstan
m <- cmdstan_model("fitting_regions.stan")
fit <- m$sample(
data=stan_data,
iter_sampling = 10,
iter_warmup = 10,
parallel_chains = 4,
chains=4,
thin=1,
seed=12345,
refresh = 20,
adapt_delta = 0.8,
max_treedepth = 10)     # adapt_delta controls acceptance probability (lower -> larger step size, higher acceptance rate, less time, less explored posterior distribution
# Example in R using rstan
m <- cmdstan_model("fitting_regions.stan")
fit <- m$sample(
data=stan_data,
iter_sampling = 10,
iter_warmup = 10,
parallel_chains = 4,
chains=4,
thin=1,
seed=12345,
refresh = 20,
adapt_delta = 0.8,
max_treedepth = 10)     # adapt_delta controls acceptance probability (lower -> larger step size, higher acceptance rate, less time, less explored posterior distribution
# Example in R using rstan
m <- cmdstan_model("fitting_regions.stan")
fit <- m$sample(
data=stan_data,
iter_sampling = 10,
iter_warmup = 10,
parallel_chains = 4,
chains=4,
thin=1,
seed=12345,
refresh = 20,
adapt_delta = 0.8,
max_treedepth = 10)     # adapt_delta controls acceptance probability (lower -> larger step size, higher acceptance rate, less time, less explored posterior distribution
# Example in R using rstan
m <- cmdstan_model("fitting_regions.stan")
fit <- m$sample(
data=stan_data,
iter_sampling = 10,
iter_warmup = 10,
parallel_chains = 4,
chains=4,
thin=1,
seed=12345,
refresh = 20,
adapt_delta = 0.8,
max_treedepth = 10)     # adapt_delta controls acceptance probability (lower -> larger step size, higher acceptance rate, less time, less explored posterior distribution
stan_data <- list(M_regions= M_regions,
final_time=final_time,
W = week,
# gmobility = gmobility,
initial_seeding_day = initial_seeding_day,
death_data_length = death_len_data,
death= as.matrix(death_regions,death_len_data,M_regions),
SI=si,
f=f,
pop=pop,
C_base=C_base,
C_lockdown = C_lockdown,
day_week_index = day_week_index,
I = lockdown_index,
fitting_death_start = fitting_death_start
)
# Example in R using rstan
m <- cmdstan_model("fitting_regions.stan")
# Example in R using rstan
m <- cmdstan_model("fitting_regions.stan")
fit <- m$sample(
data=stan_data,
iter_sampling = 10,
iter_warmup = 10,
parallel_chains = 4,
chains=4,
thin=1,
seed=12345,
refresh = 20,
adapt_delta = 0.8,
max_treedepth = 10)     # adapt_delta controls acceptance probability (lower -> larger step size, higher acceptance rate, less time, less explored posterior distribution
# Example in R using rstan
m <- cmdstan_model("fitting_regions.stan")
fit <- m$sample(
data=stan_data,
iter_sampling = 10,
iter_warmup = 10,
parallel_chains = 4,
chains=4,
thin=1,
seed=12345,
refresh = 20,
adapt_delta = 0.8,
max_treedepth = 10)     # adapt_delta controls acceptance probability (lower -> larger step size, higher acceptance rate, less time, less explored posterior distribution
# Example in R using rstan
m <- cmdstan_model("fitting_regions.stan")
fit <- m$sample(
data=stan_data,
iter_sampling = 10,
iter_warmup = 10,
parallel_chains = 4,
chains=4,
thin=1,
seed=12345,
refresh = 20,
adapt_delta = 0.8,
max_treedepth = 10)     # adapt_delta controls acceptance probability (lower -> larger step size, higher acceptance rate, less time, less explored posterior distribution
final_time
death_len_data
326/7
dim(gmobility)
(dimlockdown_index)
dim(lockdown_index)
