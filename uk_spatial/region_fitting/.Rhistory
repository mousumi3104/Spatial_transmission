# plot_rt <- plot_rt + ylab(expression(R[t]))+
#     theme(axis.title.y = element_text(size = 20, margin = margin(r=15)))
# }else {
#   plot_rt <- plot_rt + theme(axis.title.y = element_blank())
# }
# plot(plot_rt)
assign(paste0("rt",i),plot_rt)
# death_regions$column_to_plot <- death_regions[[i]]
# plot_inf <-ggplot(data_est_inf_disc)+
#
#   geom_ribbon(data = data_inf_disc, aes(x = time, ymin = inf_disc_min, ymax = inf_disc_max, fill=key1))+
#   geom_ribbon(data = data_inf_con, aes(x = time, ymin = inf_con_min, ymax = inf_con_max, fill=key1))+
#   geom_line(data = data_est_inf_disc, aes(x = time,y = est_inf_disc_mean, color = "Estimated disconnected\nincidence"), linewidth = 1)+
#   geom_line(data = data_est_inf_con, aes(x = time, y = est_inf_con_mean, color = "Estimated connected\nincidence"), linewidth = 1)+
#   geom_point(data = death_regions, aes(x = time, y = column_to_plot, color = "Simulated\nincidence")) +
#
#   xlab("")+
#   ylab("Weekly deaths")+
#   scale_fill_manual(name = "",
#                     values = c("95% CI of estimated\ndisconnectded incidence" = alpha("red4", 0.25),
#                                "95% CI of estimated\nconnectded incidence" = alpha("seagreen3", 0.25))) +
#   scale_color_manual(values = colors_incidence)+
#   scale_shape_manual(values = 16)+
#   ggtitle(regions[i])+
#   scale_x_date(date_labels = "%b %y", date_breaks = "1 month") +
#   theme_bw()+
#   theme(axis.text.x = element_text(angle =50, hjust = 0.5,vjust = 0.4,size =17,color="black"),
#         axis.text.y = element_text(size = 15),
#         axis.title.x = element_text(size = 20, margin = margin(t=10)),
#         plot.title = element_text(size=20, margin = margin(l = 15,b=10),hjust = 0.5),
#         legend.position = "right",
#         legend.title = element_blank(),      # Increase legend title size
#         legend.text = element_text(size = 17),       # Increase legend text size
#         legend.key.size = unit(1.2, "cm"))  +
#
#   guides(fill=guide_legend(ncol=1))
# # if (i == 1){
#   # plot_inf <- plot_inf + ylab("Incidence")+
# #     theme(axis.title.y = element_text(size = 20, margin = margin(r=10)))
# # }else {
# #   plot_inf <- plot_inf + theme(axis.title.y = element_blank())
# # }
#
# # plot(plot_inf)
# assign(paste0("inf",i),plot_inf)
}
legend_rt <- get_legend(plot_rt)
# Remove legends from individual plots
plot_rt_list <-  list(rt1,rt2,rt3,rt4,rt5,rt6,rt7,rt8,rt9)
for (i in 1:length(plot_rt_list)){
plot_rt_list[[i]] <- plot_rt_list[[i]] + theme(legend.position = "none")
}
p_rt <- plot_grid(do.call(plot_grid, c(plot_rt_list,  nrow = 3, ncol = 3)),legend_rt,nrow=1,rel_widths =c(2.5,0.38))
p_rt <- p_rt + theme(plot.background = element_rect(fill = "white", color = NA))
p_rt <- ggdraw() +
draw_label("Estimated Rt with double mobility", fontface = 'bold', x = 0.5, y = 0.98, hjust = 0.5, size = 20) +  # Title
draw_plot(p_rt, y = 0, height = 0.95)  # Add the combined plot
print(p_rt)
#---------- disconnected model ------------------------------------------------------------------------------------
for (i in 1:M_regions){
# load(paste0("results/disconnected/region_disconnected_xyz",i,".rds"))
fit <- fit_disconnected
est_Rt_disc <- fit$draws("Rt",format="matrix")
data_est_Rt_disc <- data.frame(est_Rt_disc_mean = colMeans(est_Rt_disc[,(((i-1)*final_time)+1):(i*final_time)]),
Rt_disc_min_1 = colQuantiles(est_Rt_disc[,(((i-1)*final_time)+1):(i*final_time)],prob=0.025),
Rt_disc_max_1 = colQuantiles(est_Rt_disc[,(((i-1)*final_time)+1):(i*final_time)],prob=0.975),
Rt_disc_min_2 = colQuantiles(est_Rt_disc[,(((i-1)*final_time)+1):(i*final_time)],prob=0.25),
Rt_disc_max_2 = colQuantiles(est_Rt_disc[,(((i-1)*final_time)+1):(i*final_time)],prob=0.75),
time = seq(from=inf_start_date ,to = end_date, by = "day"))
data_est_Rt_disc <- data_est_Rt_disc %>% filter(time >= fitting_start)
#
# est_Rt_disc <- fit$draws("Rt",format="matrix")
# data_est_Rt_disc <- data.frame(est_Rt_disc_mean = colMeans(est_Rt_disc),
#                                Rt_disc_min_1 = colQuantiles(est_Rt_disc,prob=0.025),
#                                Rt_disc_max_1 = colQuantiles(est_Rt_disc,prob=0.975),
#                                Rt_disc_min_2 = colQuantiles(est_Rt_disc,prob=0.25),
#                                Rt_disc_max_2 = colQuantiles(est_Rt_disc,prob=0.75),
#                                time = seq(from=inf_start_date ,to =  end_date, by = "day"))
# data_est_Rt_disc <- data_est_Rt_disc %>%
#   filter(time >= fitting_start)
data_Rt_disc_95 <- data.frame(time = data_est_Rt_disc$time, Rt_disc_min = data_est_Rt_disc$Rt_disc_min_1,
Rt_disc_max = data_est_Rt_disc$Rt_disc_max_1, key = rep("nintyfive", length(data_est_Rt_disc$time)))
data_Rt_disc_50 <- data.frame(time = data_est_Rt_disc$time, Rt_disc_min = data_est_Rt_disc$Rt_disc_min_2,
Rt_disc_max = data_est_Rt_disc$Rt_disc_max_2, key = rep("fifty", length(data_est_Rt_disc$time)))
data_Rt_disc <- data_Rt_disc_95
data_Rt_disc$key1 <- "95% CI of \ndisconnected Rt"
#---------------------------
# est_inf_disc <- fit$draws("weekly_deaths",format="matrix")
# data_est_inf_disc <- data.frame(est_inf_disc_mean = colMeans(est_inf_disc[,(((i-1)*death_data_length)+1):(i*death_data_length)]),
#                                inf_disc_min_1 = colQuantiles(est_inf_disc[,(((i-1)*death_data_length)+1):(i*death_data_length)],prob=0.025),
#                                inf_disc_max_1 = colQuantiles(est_inf_disc[,(((i-1)*death_data_length)+1):(i*death_data_length)],prob=0.975),
#                                inf_disc_min_2 = colQuantiles(est_inf_disc[,(((i-1)*death_data_length)+1):(i*death_data_length)],prob=0.25),
#                                inf_disc_max_2 = colQuantiles(est_inf_disc[,(((i-1)*death_data_length)+1):(i*death_data_length)],prob=0.75),
#                                time = seq(from=inf_start_date ,to =  end_date, by = "week"))
#
# # est_inf_disc <- fit$draws("weekly_deaths",format="matrix")       #fit_disconnected$draws("infection", format = "matrix")
# # data_est_inf_disc <- data.frame(est_inf_disc_mean = colMeans(est_inf_disc),
# #                                 inf_disc_min_1 = colQuantiles(est_inf_disc,prob=0.025),
# #                                 inf_disc_max_1 = colQuantiles(est_inf_disc,prob=0.975),
# #                                 inf_disc_min_2 = colQuantiles(est_inf_disc,prob=0.25),
# #                                 inf_disc_max_2 = colQuantiles(est_inf_disc,prob=0.75),
# #                                 time = seq(from=inf_start_date ,to =  end_date, by = "week"))
#
# # data_est_inf_disc <- data_est_inf_disc %>%
# #   filter(time >= fitting_start)
#
# data_inf_disc_95 <- data.frame(time = data_est_inf_disc$time, inf_disc_min = data_est_inf_disc$inf_disc_min_1,
#                                inf_disc_max = data_est_inf_disc$inf_disc_max_1, key = rep("nintyfive", length(data_est_inf_disc$time)))
#
# data_inf_disc_50 <- data.frame(time = data_est_inf_disc$time, inf_disc_min = data_est_inf_disc$inf_disc_min_2,
#                                inf_disc_max = data_est_inf_disc$inf_disc_max_2, key = rep("fifty", length(data_est_inf_disc$time)))
#
# # data_inf_disc <- rbind(data_inf_disc_95, data_inf_disc_50)
# # levels(data_inf_disc$key) <- c("ninetyfive", "fifty")
# data_inf_disc <- data_inf_disc_95
# data_inf_disc$key1 <- "95% CI of estimated\ndisconnectded incidence"
#
#------- connected model --------------------------------------------------------------------------------------------
fit <- fit_connected
est_Rt_con <- fit$draws("Rt",format="matrix")
data_est_Rt_con <- data.frame(est_Rt_con_mean = colMeans(est_Rt_con[,(((i-1)*final_time)+1):(i*final_time)]),
Rt_con_min_1 = colQuantiles(est_Rt_con[,(((i-1)*final_time)+1):(i*final_time)],prob=0.025),
Rt_con_max_1 = colQuantiles(est_Rt_con[,(((i-1)*final_time)+1):(i*final_time)],prob=0.975),
Rt_con_min_2 = colQuantiles(est_Rt_con[,(((i-1)*final_time)+1):(i*final_time)],prob=0.25),
Rt_con_max_2 = colQuantiles(est_Rt_con[,(((i-1)*final_time)+1):(i*final_time)],prob=0.75),
time = seq(from=inf_start_date ,to =  end_date, by = "day"))
data_est_Rt_con <- data_est_Rt_con %>% filter(time >= fitting_start)
data_Rt_con_95 <- data.frame(time = data_est_Rt_con$time, Rt_con_min = data_est_Rt_con$Rt_con_min_1,
Rt_con_max = data_est_Rt_con$Rt_con_max_1, key = rep("nintyfive", length(data_est_Rt_con$time)))
data_Rt_con_50 <- data.frame(time = data_est_Rt_con$time, Rt_con_min = data_est_Rt_con$Rt_con_min_2,
Rt_con_max = data_est_Rt_con$Rt_con_max_2, key = rep("fifty", length(data_est_Rt_con$time)))
#  data_Rt_con <- rbind(data_Rt_con_95, data_Rt_con_50)
#  levels(data_Rt_con$key) <- c("ninetyfive", "fifty")
data_Rt_con <- data_Rt_con_95
data_Rt_con$key1 <- "95% CI of \nconnected Rt"
#-------------------------------
# est_inf_con <- fit$draws("weekly_deaths",format="matrix")
# data_est_inf_con <- data.frame(est_inf_con_mean = colMeans(est_inf_con[,(((i-1)*death_data_length)+1):(i*death_data_length)]),
#                                inf_con_min_1 = colQuantiles(est_inf_con[,(((i-1)*death_data_length)+1):(i*death_data_length)],prob=0.025),
#                                inf_con_max_1 = colQuantiles(est_inf_con[,(((i-1)*death_data_length)+1):(i*death_data_length)],prob=0.975),
#                                inf_con_min_2 = colQuantiles(est_inf_con[,(((i-1)*death_data_length)+1):(i*death_data_length)],prob=0.25),
#                                inf_con_max_2 = colQuantiles(est_inf_con[,(((i-1)*death_data_length)+1):(i*death_data_length)],prob=0.75),
#                                time = seq(from=inf_start_date ,to =  end_date, by = "week"))
#
# # data_est_inf_con <- data_est_inf_con %>%
# #   filter(time >= fitting_start)
#
# data_inf_con_95 <- data.frame(time = data_est_inf_con$time, inf_con_min = data_est_inf_con$inf_con_min_1,
#                               inf_con_max = data_est_inf_con$inf_con_max_1, key = rep("nintyfive", length(data_est_inf_con$time)))
#
# data_inf_con_50 <- data.frame(time = data_est_inf_con$time, inf_con_min = data_est_inf_con$inf_con_min_2,
#                               inf_con_max = data_est_inf_con$inf_con_max_2, key = rep("fifty", length(data_est_inf_con$time)))
#
# #  data_inf_con <- rbind(data_inf_95, data_inf_50)
# #  levels(data_inf_con$key) <- c("ninetyfive", "fifty")
# data_inf_con <- data_inf_con_95
# data_inf_con$key1 <- "95% CI of estimated\nconnectded incidence"
#
Rt_threshold <- data.frame(time = data_est_Rt_disc$time, Rt = rep(1,length(data_est_Rt_disc$time)))  # for Rt threshold horizontal line
#---------- plot ------------------------------------------------------------------------------------------------
colors_rt <- c("Connected Rt" = "#1a9850", "Disconnected Rt" = "#b2182b")#, "Simulated Rt"="black")
colors_incidence <- c("Estimated disconnected\nincidence" = "red4", "Estimated connected\nincidence" = "green4", "Simulated\nincidence"="coral3")
plot_rt <- ggplot(data_est_Rt_disc)+
geom_ribbon(data = data_Rt_disc, aes(x = time, ymin = Rt_disc_min, ymax = Rt_disc_max, fill=key1))+
geom_ribbon(data = data_Rt_con, aes(x = time, ymin = Rt_con_min, ymax = Rt_con_max, fill=key1))+
geom_line(data = data_est_Rt_disc, aes(x = time,y = est_Rt_disc_mean, color = "Disconnected Rt"), linewidth = 1)+
geom_line(data = data_est_Rt_con, aes(x = time, y = est_Rt_con_mean, color = "Connected Rt"), linewidth = 1)+
geom_line(data = Rt_threshold, aes(x=time, y = Rt),color = "black")+
geom_vline(xintercept = as.Date(c(first_lockdown_start,first_lockdown_end,second_lockdown_start,second_lockdown_end)), linetype = "dashed", color = "black", linewidth = 1)+
xlab("")+
ylab(expression(R[t]))+
scale_fill_manual(name = "",
values = c("95% CI of \nconnected Rt" = alpha("#1a9850", 0.25),
"95% CI of \ndisconnected Rt" = alpha("#b2182b", 0.25))) +
scale_color_manual(values = colors_rt)+
scale_x_date(date_labels = "%b %y", date_breaks = "1 month") +
ggtitle(regions[i])+
theme_bw()+
theme(axis.text.x = element_text(angle = 50,hjust = 0.4, vjust = 0.4,size = 17,color="black"),
axis.text.y = element_text(size = 20,margin = margin(r=10),color="black"),
axis.title.y = element_text(size = 20, margin=margin(r=10)),
axis.title.x = element_text(size = 20, margin=margin(r=10)),
plot.title = element_text(size=20, margin = margin(l = 15,b=10),hjust = 0.5),
legend.position = "right",
legend.title = element_blank(),      # Increase legend title size
legend.text = element_text(size = 20),       # Increase legend text size
legend.key.size = unit(1.2, "cm"))+
guides(fill=guide_legend(ncol=1))
# if (i == 1){
# plot_rt <- plot_rt + ylab(expression(R[t]))+
#     theme(axis.title.y = element_text(size = 20, margin = margin(r=15)))
# }else {
#   plot_rt <- plot_rt + theme(axis.title.y = element_blank())
# }
# plot(plot_rt)
assign(paste0("rt",i),plot_rt)
# death_regions$column_to_plot <- death_regions[[i]]
# plot_inf <-ggplot(data_est_inf_disc)+
#
#   geom_ribbon(data = data_inf_disc, aes(x = time, ymin = inf_disc_min, ymax = inf_disc_max, fill=key1))+
#   geom_ribbon(data = data_inf_con, aes(x = time, ymin = inf_con_min, ymax = inf_con_max, fill=key1))+
#   geom_line(data = data_est_inf_disc, aes(x = time,y = est_inf_disc_mean, color = "Estimated disconnected\nincidence"), linewidth = 1)+
#   geom_line(data = data_est_inf_con, aes(x = time, y = est_inf_con_mean, color = "Estimated connected\nincidence"), linewidth = 1)+
#   geom_point(data = death_regions, aes(x = time, y = column_to_plot, color = "Simulated\nincidence")) +
#
#   xlab("")+
#   ylab("Weekly deaths")+
#   scale_fill_manual(name = "",
#                     values = c("95% CI of estimated\ndisconnectded incidence" = alpha("red4", 0.25),
#                                "95% CI of estimated\nconnectded incidence" = alpha("seagreen3", 0.25))) +
#   scale_color_manual(values = colors_incidence)+
#   scale_shape_manual(values = 16)+
#   ggtitle(regions[i])+
#   scale_x_date(date_labels = "%b %y", date_breaks = "1 month") +
#   theme_bw()+
#   theme(axis.text.x = element_text(angle =50, hjust = 0.5,vjust = 0.4,size =17,color="black"),
#         axis.text.y = element_text(size = 15),
#         axis.title.x = element_text(size = 20, margin = margin(t=10)),
#         plot.title = element_text(size=20, margin = margin(l = 15,b=10),hjust = 0.5),
#         legend.position = "right",
#         legend.title = element_blank(),      # Increase legend title size
#         legend.text = element_text(size = 17),       # Increase legend text size
#         legend.key.size = unit(1.2, "cm"))  +
#
#   guides(fill=guide_legend(ncol=1))
# # if (i == 1){
#   # plot_inf <- plot_inf + ylab("Incidence")+
# #     theme(axis.title.y = element_text(size = 20, margin = margin(r=10)))
# # }else {
# #   plot_inf <- plot_inf + theme(axis.title.y = element_blank())
# # }
#
# # plot(plot_inf)
# assign(paste0("inf",i),plot_inf)
}
legend_rt <- get_legend(plot_rt)
# Remove legends from individual plots
plot_rt_list <-  list(rt1,rt2,rt3,rt4,rt5,rt6,rt7,rt8,rt9)
for (i in 1:length(plot_rt_list)){
plot_rt_list[[i]] <- plot_rt_list[[i]] + theme(legend.position = "none")
}
p_rt <- plot_grid(do.call(plot_grid, c(plot_rt_list,  nrow = 3, ncol = 3)),legend_rt,nrow=1,rel_widths =c(2.5,0.38))
p_rt <- p_rt + theme(plot.background = element_rect(fill = "white", color = NA))
p_rt <- ggdraw() +
draw_label("Estimated Rt with double mobility", fontface = 'bold', x = 0.5, y = 0.98, hjust = 0.5, size = 20) +  # Title
draw_plot(p_rt, y = 0, height = 0.95)  # Add the combined plot
print(p_rt)
load("data/final_pop_2020_ltla.Rdata")
load("data/england_death_2020.Rdata")
load("data/uk_regions_mobility_matrix.Rdata")
pop_2020$region <- sapply(pop_2020$region, function(x){
paste0(toupper(substring(x,1,1)),tolower(substring(x,2)))})
north_east_index <- which(pop_2020$region == "North east")
north_west_index <- which(pop_2020$region == "North west")
yorkshire_index <- which(pop_2020$region == "Yorkshire and the humber")
east_midlands_index <- which(pop_2020$region == "East midlands")
west_midlands_index <- which(pop_2020$region == "West midlands")
east_index <- which(pop_2020$region == "East")
london_index <- which(pop_2020$region == "London")
south_east_index <- which(pop_2020$region == "South east")
south_west_index <- which(pop_2020$region == "South west")
death_data <- death_data %>% select(all_of(pop_2020$area_name))
death_regions <- data.frame(north_east = apply(death_data[,north_east_index],1,sum),
north_west = apply(death_data[,north_west_index],1,sum),
yorkshire = apply(death_data[,yorkshire_index],1,sum),
east_midlands = apply(death_data[,east_midlands_index],1,sum),
west_midlands = apply(death_data[,west_midlands_index],1,sum),
east = apply(death_data[,east_index],1,sum),
london = apply(death_data[,london_index],1,sum),
south_east = apply(death_data[,south_east_index],1,sum),
south_west = apply(death_data[,south_west_index],1,sum))
death_regions$total_death <- apply(death_regions,1, sum)
mobility_change <- readRDS("data/mobility_change.rds")
View(mobility_change)
mobility_change <- mobility_change %>%
group_by(area_name, date, region) %>%
summarize(avg_retail_and_recreation_percent_change_from_baseline = mean(retail_and_recreation_percent_change_from_baseline, na.rm = TRUE),
ave_grocery_and_pharmacy_percent_change_from_baseline = mean(grocery_and_pharmacy_percent_change_from_baseline, na.rm = TRUE),
ave_parks_percent_change_from_baseline = mean(parks_percent_change_from_baseline, na.rm = TRUE),
ave_transit_stations_percent_change_from_baseline = mean(transit_stations_percent_change_from_baseline, na.rm = TRUE),
ave_workplaces_percent_change_from_baseline = mean(workplaces_percent_change_from_baseline, na.rm = TRUE))
View(mobility_change)
mobility_change_region <- mobility_change %>%
group_by(region, date) %>%
summarize(avg_retail_and_recreation_percent_change_from_baseline = mean(avg_retail_and_recreation_percent_change_from_baseline, na.rm = TRUE),
ave_grocery_and_pharmacy_percent_change_from_baseline = mean(ave_grocery_and_pharmacy_percent_change_from_baseline, na.rm = TRUE),
ave_parks_percent_change_from_baseline = mean(ave_parks_percent_change_from_baseline, na.rm = TRUE),
ave_transit_stations_percent_change_from_baseline = mean(ave_transit_stations_percent_change_from_baseline, na.rm = TRUE),
ave_workplaces_percent_change_from_baseline = mean(ave_workplaces_percent_change_from_baseline, na.rm = TRUE),.groups = "drop")
View(mobility_change_region)
View(pop_2020)
setdiff(mobility_change$area_name, pop_2020$area_name)
setdiff( pop_2020$area_name,mobility_change$area_name)
gmob_area_name <- mobility_change$area_name
pop_area_name <- pop_2020$area_name
mobility_change <- readRDS("data/mobility_change.rds")
gmob_area_name <- mobility_change$area_name
pop_area_name <- pop_2020$area_name
gmob_area_name <- unique(mobility_change$area_name)
gmob_area_name <- data.frame(area = unique(mobility_change$area_name), index = 1:length(unique(mobility_change$area_name)))
View(gmob_area_name)
pop_area_name <- pop_2020$area_name
pop_area_name <- data.frame(area=pop_2020$area_name)
View(pop_area_name)
View(pop_2020)
a ,- read.csv("~/downloads/Lower_Tier_Local_Authority_to_Upper_Tier_Local_Authority_(December_2022)_Lookup_in_England_and_Wales.csv")
a <- read.csv("~/downloads/Lower_Tier_Local_Authority_to_Upper_Tier_Local_Authority_(December_2022)_Lookup_in_England_and_Wales.csv")
View(a)
unique(a$UTLA22NM)
a <- a[grepl("^E",data$column),]
a <- a[grepl("^E",a$UTLA22NM),]
a <- read.csv("~/downloads/Lower_Tier_Local_Authority_to_Upper_Tier_Local_Authority_(December_2022)_Lookup_in_England_and_Wales.csv")
a <- a[grepl("^E",a$UTLA22CD),]
length(unique(a$UTLA22NM))
mobility_2020 <- read.csv("data/2020_GB_Region_Mobility_Report.csv")
mobility_2020 <- read.csv("data/2020_GB_Region_Mobility_Report.csv")
View(mobility_2020)
unique(mobility_2020$country_region_code)
unique(mobility_2020$country_region)
unique(mobility_2020$sub_region_1)
unique(mobility_2020$sub_region_2)
unique(mobility_2020$metro_area)
View(mobility_2020)
View(pop_2020)
unique(mobility_2020$sub_region_1)
a <- read.csv("~/Downloads/Filtered_Data_for_England_Regions_Only.csv")
length(unique(a$sub_region_1))
View(a)
unique(mobility_2020$sub_region_2)
a <- read.csv("~/Downloads/Local_Authority_District_(2011)_to_Local_Authority_District_(2021)_Lookup_for_England_and_Wales.csv")
View(a)
length(unique(a$LAD21NM))
length(unique(a$LAD11NM))
a <- a %>% filter(grepl("^E",LAD11NM))
a <- read.csv("~/Downloads/Local_Authority_District_(2011)_to_Local_Authority_District_(2021)_Lookup_for_England_and_Wales.csv")
a <- a %>% filter(grepl("^E",LAD11CD))
a <- read.csv("~/Downloads/WD20_LAD20_CTY20_OTH_UK_LU_v2_27715a77546b4b5a9746baf703dd9a05_-5210079731362329005.csv")
length(unique(a$LAD20NM))
length(unique(a$RGN20CD))
length(unique(a$RGN20NM))
unique(a$RGN20NM)
length(unique(sub_region_1))
length(unique(mobility_2020$sub_region_1))
Unitary_counties <- unique(mobility_2020$sub_region_1)
unitary_counties <- unique(mobility_2020$sub_region_1)
counties_unitary <- read.csv("~/downloads/Counties_and_Unitary_Authorities_December_2021_EN_BFC_2022_2329911750846456281.csv")
b <- names(counties_unitary$CTYNME)
counties_unitary <- read.csv("~/downloads/Counties_and_Unitary_Authorities_December_2021_EN_BFC_2022_2329911750846456281.csv")   # check with google mobility data is from ONS website
b <- names(counties_unitary$CTYNME)
b <- counties_unitary$CTYNME
b <- b[b != ""]
class(b)
b
b <- counties_unitary$CTYNME
unitary_counties <- unique(mobility_2020$sub_region_1)  #counties and unitary authorities (google mobility)
setdiff(unitary_counties,b)
setdiff(b,unitary_counties)
Northern_Ireland_region <- c("Belfast","Ballymena","Magherafelt","North Down","Dungannon","Coleraine","Cookstown","Larne","Strabane","Newry and Mourne",
"Omagh","Armagh","Castlereagh","Down","Antrim","Limvady","Derry","Craigavon","Banbridge","Ards","Lisburn","Carrickfergus",
"Ballymoney","Fermanagh","Moyle","Newtownabbey")
Scotland_region <- c("Clackmannanshire","Glasgow City","Dumfries and Galloway","East Ayrshire","East Lothian","East Renfrewshire","Falkirk","Fife",
"Highland","Inverclyde","Midlothian","Moray","North Ayrshire","Perth and Kinross","Scottish Borders","South Ayrshire","South Lanarkshire",
"Stirling","Aberdeen City","Aberdeenshire","Argyll and Bute","City of Edinburgh","Renfrewshire","West Dunbartonshire","West Lothian",
"Angus","Dundee City","North Lanarkshire","East Dunbartonshire","Orkney Islands","Shetland Islands","Eilean Siar")
Wales_region <- c("Isle of Anglesey","Gwynedd","Conwy","Denbighshire","Flintshire","Wrexham","Ceredigion","Pembrokeshire","Carmarthenshire",
"Swansea","Neath Port Talbot","Bridgend","The Vale of Glamorgan","Cardiff","Rhondda Cynon Taf","Caerphilly","Blaenau Gwent",
"Torfaen","Monmouthshire","Powys","Merthyr Tydfil","Newport")
setdiff(Scotland_region,unitary_counties)
View(mobility_2020)
install.packages("stringdist")
library(stringdist)
distance_matrix(Scotland_region,unitary_counties, method = "jw")
distance_matrix <- stringdistmatrix(Scotland_region,unitary_counties, method = "jw")
matches <- expand.grid(Name1 = Scotland_region, Name2 = unitary_counties)
matches$Distance <- as.vector(distance_matrix)
# Filter matches with a low distance (threshold)
threshold <- 0.2  # Adjust based on similarity needs
similar_matches <- matches[matches$Distance < threshold, ]
print(similar_matches)
length(similar_matches$Name1)
# Filter matches with a low distance (threshold)
threshold <- 0.18  # Adjust based on similarity needs
similar_matches <- matches[matches$Distance < threshold, ]
length(similar_matches$Name1)
# Filter matches with a low distance (threshold)
threshold <- 0.15  # Adjust based on similarity needs
similar_matches <- matches[matches$Distance < threshold, ]
length(similar_matches$Name1)
# Filter matches with a low distance (threshold)
threshold <- 0.14  # Adjust based on similarity needs
similar_matches <- matches[matches$Distance < threshold, ]
length(similar_matches$Name1)
# Filter matches with a low distance (threshold)
threshold <- 0.13  # Adjust based on similarity needs
similar_matches <- matches[matches$Distance < threshold, ]
length(similar_matches$Name1)
print(similar_matches$Name1)
mobility_2020$country[mobility_2020$sub_region_1 == matches$Name2] <= "Scotland"
mobility_2020$country = "NA"
mobility_2020$country[mobility_2020$sub_region_1 == matches$Name2] <= "Scotland"
View(mobility_2020)
unique(mobility_2020$country)
mobility_2020$country[mobility_2020$sub_region_1 %in% matches$Name2] <= "Scotland"
unique(mobility_2020$country)
View(mobility_2020)
mobility_2020$country = NA
mobility_2020$country[mobility_2020$sub_region_1 %in% matches$Name2] <= "Scotland"
mobility_2020$country[mobility_2020$sub_region_1 %in% matches$Name2] <- "Scotland"
View(mobility_2020)
mobility_2020 <- read.csv("data/2020_GB_Region_Mobility_Report.csv") #google mobility
mobility_2020$country = NA
mobility_2020$country[mobility_2020$sub_region_1 %in% matches$Name1] <- "Scotland"
View(matches)
print(similar_matches$Name1)
similar_matches <- matches[matches$Distance < threshold, ]
View(similar_matches)
library(stringdist)
mobility_2020 <- read.csv("data/2020_GB_Region_Mobility_Report.csv") #google mobility
unitary_counties <- unique(mobility_2020$sub_region_1)  #counties and unitary authorities (google mobility)
counties_unitary <- read.csv("~/downloads/Counties_and_Unitary_Authorities_December_2021_EN_BFC_2022_2329911750846456281.csv")   # check with google mobility data is from ONS website
Wales_region <- c("Isle of Anglesey","Gwynedd","Conwy","Denbighshire","Flintshire","Wrexham","Ceredigion","Pembrokeshire","Carmarthenshire",
"Swansea","Neath Port Talbot","Bridgend","The Vale of Glamorgan","Cardiff","Rhondda Cynon Taf","Caerphilly","Blaenau Gwent",
"Torfaen","Monmouthshire","Powys","Merthyr Tydfil","Newport")
residence$region[residence$area %in% Wales_region] = "Wales"
library(stringdist)
mobility_2020 <- read.csv("data/2020_GB_Region_Mobility_Report.csv") #google mobility
unitary_counties <- unique(mobility_2020$sub_region_1)  #counties and unitary authorities (google mobility)
counties_unitary <- read.csv("~/downloads/Counties_and_Unitary_Authorities_December_2021_EN_BFC_2022_2329911750846456281.csv")   # check with google mobility data is from ONS website
Wales_region <- c("Isle of Anglesey","Gwynedd","Conwy","Denbighshire","Flintshire","Wrexham","Ceredigion","Pembrokeshire","Carmarthenshire",
"Swansea","Neath Port Talbot","Bridgend","The Vale of Glamorgan","Cardiff","Rhondda Cynon Taf","Caerphilly","Blaenau Gwent",
"Torfaen","Monmouthshire","Powys","Merthyr Tydfil","Newport")
Scotland_region <- c("Clackmannanshire","Glasgow City","Dumfries and Galloway","East Ayrshire","East Lothian","East Renfrewshire","Falkirk","Fife",
"Highland","Inverclyde","Midlothian","Moray","North Ayrshire","Perth and Kinross","Scottish Borders","South Ayrshire","South Lanarkshire",
"Stirling","Aberdeen City","Aberdeenshire","Argyll and Bute","City of Edinburgh","Renfrewshire","West Dunbartonshire","West Lothian",
"Angus","Dundee City","North Lanarkshire","East Dunbartonshire","Orkney Islands","Shetland Islands","Eilean Siar")
Northern_Ireland_region <- c("Belfast","Ballymena","Magherafelt","North Down","Dungannon","Coleraine","Cookstown","Larne","Strabane","Newry and Mourne",
"Omagh","Armagh","Castlereagh","Down","Antrim","Limvady","Derry","Craigavon","Banbridge","Ards","Lisburn","Carrickfergus",
"Ballymoney","Fermanagh","Moyle","Newtownabbey")
##find similar word
distance_matrix_scotland <- stringdistmatrix(Scotland_region,unitary_counties, method = "jw")
matches_scotland <- expand.grid(Name1 = Scotland_region, Name2 = unitary_counties)
matches_scotland$Distance <- as.vector(distance_matrix_scotland)
# Filter matches with a low distance (threshold)
threshold_scotland <- 0.13  # Adjust based on similarity needs
similar_matches_scotland <- matches_scotland[matches_scotland$Distance < threshold_scotland, ]
mobility_2020$country = NA
mobility_2020$country[mobility_2020$sub_region_1 %in% similar_matches_scotland$Name1] <- "Scotland"
########-----------------------------------------------------------------------------------------------
distance_matrix_wales <- stringdistmatrix(wales_region,unitary_counties, method = "jw")
library(stringdist)
mobility_2020 <- read.csv("data/2020_GB_Region_Mobility_Report.csv") #google mobility
unitary_counties <- unique(mobility_2020$sub_region_1)  #counties and unitary authorities (google mobility)
counties_unitary <- read.csv("~/downloads/Counties_and_Unitary_Authorities_December_2021_EN_BFC_2022_2329911750846456281.csv")   # check with google mobility data is from ONS website
Wales_region <- c("Isle of Anglesey","Gwynedd","Conwy","Denbighshire","Flintshire","Wrexham","Ceredigion","Pembrokeshire","Carmarthenshire",
"Swansea","Neath Port Talbot","Bridgend","The Vale of Glamorgan","Cardiff","Rhondda Cynon Taf","Caerphilly","Blaenau Gwent",
"Torfaen","Monmouthshire","Powys","Merthyr Tydfil","Newport")
scotland_region <- c("Clackmannanshire","Glasgow City","Dumfries and Galloway","East Ayrshire","East Lothian","East Renfrewshire","Falkirk","Fife",
"Highland","Inverclyde","Midlothian","Moray","North Ayrshire","Perth and Kinross","Scottish Borders","South Ayrshire","South Lanarkshire",
"Stirling","Aberdeen City","Aberdeenshire","Argyll and Bute","City of Edinburgh","Renfrewshire","West Dunbartonshire","West Lothian",
"Angus","Dundee City","North Lanarkshire","East Dunbartonshire","Orkney Islands","Shetland Islands","Eilean Siar")
northern_ireland_region <- c("Belfast","Ballymena","Magherafelt","North Down","Dungannon","Coleraine","Cookstown","Larne","Strabane","Newry and Mourne",
"Omagh","Armagh","Castlereagh","Down","Antrim","Limvady","Derry","Craigavon","Banbridge","Ards","Lisburn","Carrickfergus",
"Ballymoney","Fermanagh","Moyle","Newtownabbey")
wales_region <- c("Isle of Anglesey","Gwynedd","Conwy","Denbighshire","Flintshire","Wrexham","Ceredigion","Pembrokeshire","Carmarthenshire",
"Swansea","Neath Port Talbot","Bridgend","The Vale of Glamorgan","Cardiff","Rhondda Cynon Taf","Caerphilly","Blaenau Gwent",
"Torfaen","Monmouthshire","Powys","Merthyr Tydfil","Newport")
distance_matrix_wales <- stringdistmatrix(wales_region,unitary_counties, method = "jw")
matches_wales <- expand.grid(Name1 = wales_region, Name2 = unitary_counties)
matches_wales$Distance <- as.vector(distance_matrix_wales)
distance_matrix_ireland <- stringdistmatrix(northern_ireland_region,unitary_counties, method = "jw")
matches_ireland <- expand.grid(Name1 = northern_ireland_region, Name2 = unitary_counties)
matches_ireland$Distance <- as.vector(distance_matrix_ireland)
threshold_wales <-
threshold_ireland <-
similar_matches_scotland <- matches_scotland[matches_scotland$Distance < threshold_scotland, ]
threshold_wales <- 0.13
similar_matches_wales <- matches_wales[matches_wales$Distance < threshold_wales, ]
threshold_wales <- 0.15
similar_matches_wales <- matches_wales[matches_wales$Distance < threshold_wales, ]
print(similar_matches_wales)
threshold_wales <- 0.142
similar_matches_wales <- matches_wales[matches_wales$Distance < threshold_wales, ]
print(similar_matches_wales)
threshold_ireland <- 0.14
similar_matches_ireland <- matches_ireland[matches_ireland$Distance < threshold_ireland, ]
print(similar_matches_ireland)
threshold_ireland <- 0.13
similar_matches_ireland <- matches_ireland[matches_ireland$Distance < threshold_ireland, ]
print(similar_matches_ireland)
mobility_2020$country[mobility_2020$sub_region_1 %in% similar_matches_scotland$Name1] <- "Scotland"
mobility_2020$country[mobility_2020$sub_region_1 %in% similar_matches_wales$Name1] <- "Wales"
mobility_2020$country[mobility_2020$sub_region_1 %in% similar_matches_ireland$Name1] <- "Northern Ireland"
unique(mobility_2020$country)
mobility_2020$country[mobility_2020$sub_region_2 %in% similar_matches_scotland$Name1] <- "Scotland"
unitary_counties <- unique(mobility_2020$sub_region_2)  #counties and unitary authorities (google mobility)
##find similar word
distance_matrix_scotland <- stringdistmatrix(Scotland_region,unitary_counties, method = "jw")
matches_scotland <- expand.grid(Name1 = Scotland_region, Name2 = unitary_counties)
matches_scotland$Distance <- as.vector(distance_matrix_scotland)
distance_matrix_wales <- stringdistmatrix(wales_region,unitary_counties, method = "jw")
matches_wales <- expand.grid(Name1 = wales_region, Name2 = unitary_counties)
matches_wales$Distance <- as.vector(distance_matrix_wales)
distance_matrix_ireland <- stringdistmatrix(northern_ireland_region,unitary_counties, method = "jw")
matches_ireland <- expand.grid(Name1 = northern_ireland_region, Name2 = unitary_counties)
matches_ireland$Distance <- as.vector(distance_matrix_ireland)
# Filter matches with a low distance (threshold)
threshold_scotland <- 0.13  # Adjust based on similarity needs
threshold_wales <- 0.142
threshold_ireland <- 0.13
similar_matches_scotland <- matches_scotland[matches_scotland$Distance < threshold_scotland, ]
similar_matches_wales <- matches_wales[matches_wales$Distance < threshold_wales, ]
similar_matches_ireland <- matches_ireland[matches_ireland$Distance < threshold_ireland, ]
