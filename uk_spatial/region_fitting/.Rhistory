rt = rep(1.2,length(incidence)*7),
iar = 0.5)
options(mc.cores = parallel::detectCores())
rstan_options(threads_per_chain = 1)#auto_write = FALSE)
m <- rstan::stan_model(file="~/OneDrive - National University of Singapore/Singapore/code1/my_model/scrap.stan")
simulation = rstan::sampling(object=m,data=stan_data, iter=1,
chains=1, thin=1, algorithm = "Fixed_param")
y_sim <- rstan::extract(simulation)
cases_model <- y_sim$E_cases_week
plot(cases_model[1,])
stan_data <- list(final_time = length(incidence)*7,
initial_seeding_day = 2,
initial_seeding = 1,
SI = SI,
f = f,
pop = 500000,
rt = rep(1.2,length(incidence)*7),
iar = 0.5)
options(mc.cores = parallel::detectCores())
rstan_options(threads_per_chain = 1)#auto_write = FALSE)
m <- rstan::stan_model(file="~/OneDrive - National University of Singapore/Singapore/code1/my_model/scrap.stan")
simulation = rstan::sampling(object=m,data=stan_data, iter=1,
chains=1, thin=1, algorithm = "Fixed_param")
y_sim <- rstan::extract(simulation)
cases_model <- y_sim$E_cases_week
plot(cases_model[1,])
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/code1/fittingcase.R", echo=TRUE)
out <- rstan::extract(fit)
View(out)
param_names <- names(out)
par(mfrow = c(2, 1), mai=c(0.4,0.8,0.05,0.3))
##plotting rt
rt_samples <- out[["rt"]]
mean_rt <- apply(rt_samples,2,mean)
ci_rt <- apply(rt_samples,2,quantile,c(0.025,0.975))
plot(seq(length(mean_rt)),mean_rt,type='l',col='red',xaxt="n",ylab="Rt")
grid(nx = 5, ny =NA ,lty = 2,col = "gray",lwd = 2)
polygon(c(1:length(mean_rt), rev(1:length(mean_rt))),
c(ci_rt[1, ], rev(ci_rt[2, ])),
col = rgb(1, 0, 0, 0.1), border = NA)
abline(a=1,b=0,h=1)
##plotting cases.... the model fitting data
cases_samples <- out[["E_cases_week"]]
mean_cases <- apply(cases_samples,2,mean)
ci_cases <- apply(cases_samples,2,quantile,c(0.025,0.975))
plot(seq(length(mean_cases)),mean_cases,type='l',col='red',ylab="Cases")
grid(nx = 5, ny = NA,lty = 2,col = "gray",lwd = 2)
polygon(c(1:length(mean_cases), rev(1:length(mean_cases))),
c(ci_cases[1, ], rev(ci_cases[2, ])),
col = rgb(1, 0, 0, 0.1), border = NA)
points(week,incidence_data_week)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/code1/fittingcase.R", echo=TRUE)
457400*20
457400*(20/100)
457400*(10/100)
457400*(70/100)
320180-45740
274440/320180
320180/180
254*(5/100)
254+12
254-12
1524*(5/100)
1524+76
1524-76
path_sir_model <- system.file("~/OneDrive - National University of Singapore/Singapore/MIDSEA/material/deterministic_sir.R", package = "odin")
sir_generator <- odin::odin(path_sir_model)
install.packages("odin")
library(odin)
path_sir_model <- system.file("~/OneDrive - National University of Singapore/Singapore/MIDSEA/material/deterministic_sir.R", package = "odin")
sir_generator <- odin::odin(path_sir_model)
path_sir_model <- system.file("~/OneDrive - National University of Singapore/Singapore/MIDSEA/material/sir_deterministic.R", package = "odin")
sir_generator <- odin::odin(path_sir_model)
sir_generator <- odin::odin(path_sir_model)
path_sir_model <- system.file("~/OneDrive - National University of Singapore/Singapore/MIDSEA/material/sir_deterministic.R")
sir_generator <- odin::odin(path_sir_model)
path_sir_model <- source("~/OneDrive - National University of Singapore/Singapore/MIDSEA/material/sir_deterministic.R")
path_sir_model <- system.file("examples/discrete_deterministic_sir.R",package = "odin")
sir_generator <- odin::odin(path_sir_model)
library(odin)
path_sir_model <- system.file("examples/discrete_deterministic_sir.R",package = "odin")
sir_generator <- odin::odin(path_sir_model)
install.packages("pkgbuild")
library(odin)
path_sir_model <- system.file("examples/discrete_deterministic_sir.R",package = "odin")
sir_generator <- odin::odin(path_sir_model)
x <- sir_generator$new()
sir_col <- c("#8c8cd9", "#cc0044", "#999966")
x$run(0:10)
install.packages("dde")
sir_col <- c("#8c8cd9", "#cc0044", "#999966")
x$run(0:10)
x_res <- x$run(0:200)
par(mar = c(4.1, 5.1, 0.5, 0.5), las = 1)
matplot(x_res[, 1], x_res[, -1], xlab = "Time", ylab = "Number of individuals",
type = "l", col = sir_col, lty = 1)
legend("topright", lwd = 1, col = sir_col, legend = c("S", "I", "R"), bty = "n")
par(mfrow = c(2, 1))
par(mfrow = c(1, 1))
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/run_odin.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/SIR.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/SIR.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/SIR.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/SIR.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/SIR.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/SIR.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/SIR.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/SIR.R", echo=TRUE)
results
result
head(result)
colnames(result)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/SIR.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/SIR.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/SIR.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/SIR.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/SIR.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/SIR.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/SIR.R", echo=TRUE)
sir$info()
sir
sir$info()$index$I
View(sir)
# Solve the model
result <- sir$run(20)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/code1/fittingcase.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/code1/fittingcase.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/code1/fittingcase.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/code1/fittingcase.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/code1/fittingcase.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/code1/fittingcase.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/code1/fittingcase.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/code1/fittingcase.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/code1/fittingcase.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/uk_mobility_data/Code/fitting_death.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/uk_mobility_data/Code/fitting_death.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/uk_mobility_data/Code/fitting_death.R", echo=TRUE)
# Example in R using rstan
m <- rstan::stan_model(file=("~/OneDrive - National University of Singapore/Uk_mobility_data/code/fitting_death.stan"))
# Example in R using rstan
m <- rstan::stan_model(file=("~/OneDrive - National University of Singapore/Uk_mobility_data/code/fitting_death.stan"))
# Example in R using rstan
m <- rstan::stan_model(file=("~/OneDrive - National University of Singapore/Uk_mobility_data/code/fitting_death.stan"))
# Example in R using rstan
m <- rstan::stan_model(file=("~/OneDrive - National University of Singapore/Uk_mobility_data/code/fitting_death.stan"))
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/uk_mobility_data/Code/fitting_death.R", echo=TRUE)
### death data fitting.  #####################################################################
library(rstan)
library(data.table)
library(lubridate)
library(gdata)
library(dplyr)
library(tidyr)
library(EnvStats)
library(scales)
library(stringr)
library(abind)
library(scales)
library(zoo)
library(matrixStats)
library(optparse)
library(ggplot2)
library(ggstance)
library(ggrepel)
library(bayesplot)
library(rstanarm)
load("~/OneDrive - National University of Singapore/uk_mobility_data/data/mobility/uk_ltla_mobility_matrix.Rdata")
load("~/OneDrive - National University of Singapore/uk_mobility_data/data/population/final_pop_2020_ltla.Rdata")
load("~/OneDrive - National University of Singapore/uk_mobility_data/data/deaths/england_death_2020.Rdata")       ## weekly data
death_data <- death_data %>% select(all_of(pop_2020$area_name))
death_data_length = nrow(death_data)
#death_data = death_data %>% mutate_all(~ replace(.,. == 0,1))
ltla_names <- colnames(mob_matrix_norm)
pop_2020 <- pop_2020 %>% arrange(match(area_name,ltla_names))
M_regions <- length(ltla_names)            #number of commercial area
pop <- pop_2020$population
C <- mob_matrix_norm
# # # # serial interval and infection to onset distribution # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
start_date <- as.Date("2019-12-30")
first_lockdown_start <- as.Date("2020-03-23")
first_lockdown_end <- as.Date("2020-05-10")
second_lockdown_start <- as.Date("2020-11-05")
second_lockdown_end <- as.Date("2020-12-02")
end_date <- as.Date("2020-12-31")
dates <- seq.Date(start_date, end_date, by="day")
monday_indices <- which(weekdays(dates) == "Monday")
final_time <- as.numeric(difftime(end_date, start_date, units = "days"))
first_lockdown_start_time <- as.numeric(difftime(first_lockdown_start, start_date, units = "days"))
first_lockdown_end_time <- as.numeric(difftime(first_lockdown_end, start_date, units = "days"))
second_lockdown_start_time <- as.numeric(difftime(second_lockdown_start, start_date, units = "days"))
second_lockdown_end_time <- as.numeric(difftime(second_lockdown_end, start_date, units = "days"))
SI <- rep(0,final_time)
SI[1] = integrate(function(x) dgamma(x,shape=6.5, rate=0.62), lower=0, upper=1.5)$value
for (i in 2:final_time){
SI[i] <- integrate(function(x) dgamma(x,shape=6.5, rate=0.62), lower=i-0.5, upper=i+0.5)$value
}
mean1 <- 5.1; cv1 <- 0.86
x1 <- rgammaAlt(1e6,mean1,cv1)
f <- rep(0,final_time)
f_cached2 <- ecdf(x1)
convolution <- function(u) (f_cached2(u))
f[1] = (convolution(1.5) - convolution(0))
for(i in 2:final_time) {
f[i] = (convolution(i+.5) - convolution(i-.5))
}
seed_time <- 5          # time of days for initial seeding
init_seed <- rep(4,M_regions)         #initial seeding
#seeding_index <- which(pop_2020$area_name %in% c("Hackney, Westminster and City of London"))
View(death_data)
# Example in R using rstan
m <- rstan::stan_model(file=("~/OneDrive - National University of Singapore/Uk_mobility_data/code/fitting_death.stan"))
# Example in R using rstan
m <- rstan::stan_model(file=("~/OneDrive - National University of Singapore/Uk_mobility_data/code/fitting_death.stan"))
fit = rstan::sampling(
object=m,
data=stan_data,
iter=4000,
warmup=2000,
chains=1,
thin=1,
control = list(adapt_delta = 0.99, max_treedepth = 15))
# Example in R using rstan
m <- rstan::stan_model(file=("~/OneDrive - National University of Singapore/Uk_mobility_data/code/fitting_death.stan"))
fit = rstan::sampling(
object=m,
data=stan_data,
iter=4000,
warmup=2000,
chains=1,
thin=1,
control = list(adapt_delta = 0.99, max_treedepth = 15))
# Example in R using rstan
m <- rstan::stan_model(file=("~/OneDrive - National University of Singapore/Uk_mobility_data/code/fitting_death.stan"))
fit = rstan::sampling(
object=m,
data=stan_data,
iter=4000,
warmup=2000,
chains=1,
thin=1,
control = list(adapt_delta = 0.99, max_treedepth = 15))
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/uk_mobility_data/Code/fitting_death.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/uk_mobility_data/Code/fitting_death.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/code1/my_model/scrap.R", echo=TRUE)
m <- rstan::stan_model(file="~/OneDrive - National University of Singapore/Singapore/code1/my_model/scrap.stan")
m <- rstan::stan_model(file="~/OneDrive - National University of Singapore/Singapore/code1/my_model/scrap.stan")
#seeding_index <- which(pop_2020$area_name %in% c("Hackney, Westminster and City of London"))
#init_seed[seeding_index] <- 7
#seeding_index <- which(pop_2020$area_name %in% c("Manchester"))
#init_seed[seeding_index] <- 3
Rt_region <- array(1, dim=c(final_time, M_regions))
mobility <- 1;
stan_data <- list(M_regions = M_regions,
final_time = final_time,
Rt_region= Rt_region,
seed_time = seed_time,
init_seed = init_seed,
SI=SI,
f=f,
C=C,
pop=pop_2020$population)
options(mc.cores = parallel::detectCores())
rstan_options(threads_per_chain = 1)#auto_write = FALSE)
m <- rstan::stan_model(file="~/OneDrive - National University of Singapore/Singapore/code1/my_model/scrap.stan")
m <- rstan::stan_model(file="~/OneDrive - National University of Singapore/Singapore/code1/my_model/scrap.stan")
m <- rstan::stan_model(file="~/OneDrive - National University of Singapore/Singapore/code1/my_model/scrap.stan")
stan_data <- list(M_regions = M_regions,
final_time = final_time,
Rt_regions= Rt_region,
seed_time = seed_time,
init_seed = init_seed,
SI=SI,
f=f,
C=C,
pop=pop_2020$population,ifr=1)
options(mc.cores = parallel::detectCores())
rstan_options(threads_per_chain = 1)#auto_write = FALSE)
m <- rstan::stan_model(file="~/OneDrive - National University of Singapore/Singapore/code1/my_model/scrap.stan")
Rt_region <- array(1.5, dim=c(final_time, M_regions))
mobility <- 1;
stan_data <- list(M_regions = M_regions,
final_time = final_time,
Rt_regions= Rt_region,
seed_time = seed_time,
init_seed = init_seed,
SI=SI,
f=f,
C=C,
pop=pop_2020$population,ifr=1)
options(mc.cores = parallel::detectCores())
rstan_options(threads_per_chain = 1)#auto_write = FALSE)
m <- rstan::stan_model(file="~/OneDrive - National University of Singapore/Singapore/code1/my_model/scrap.stan")
simulation = rstan::sampling(object=m,data=stan_data, iter=1,
chains=1, thin=1, algorithm = "Fixed_param")
y_sim <- rstan::extract(simulation)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Uk_mobility_data/Code/simulation_cases.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/SIR.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/SIR.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/SIR.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/SIR.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/SIR.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/SIR.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/birth_death_sir.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/SIR.R", echo=TRUE)
install.packages("odin")
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/birth_death_seir.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/birth_death_sir.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/birth_death_sir.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/birth_death_sir.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/birth_death_sir.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/birth_death_sir.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/birth_death_sir.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/birth_death_sir.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/birth_death_sir.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/birth_death_sir.R", echo=TRUE)
# plotting data
p_sir <- df_sir_out %>%
ggplot(aes(x = t, color = name)) +
geom_line(aes(y=S, color="S"), alpha = 0.95) +
geom_line(aes(y=I, color="I"), alpha = 0.95) +
geom_line(aes(y=R, color="R"), alpha = 0.95) +
scale_colour_discrete(limits = c("S", "I", "R")) +
xlab("Time") +
ylab("Total number of Individuals\n") +
labs(color="Compartment") +
theme_classic(base_size = 20) +
theme(legend.justification = 0, legend.position = c(0, 0.55))
p_sir
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/birth_death_sir.R", echo=TRUE)
# plotting data
p_sir <- df_sir_out %>%
ggplot(aes(x = t, color = name)) +
geom_line(aes(y=S, color="S"), alpha = 0.95) +
geom_line(aes(y=I, color="I"), alpha = 0.95) +
geom_line(aes(y=R, color="R"), alpha = 0.95) +
geom_vline(xintercept = change_time, linetype = "dashed", color = "grey", size = 1.5)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/birth_death_sir.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/birth_death_sir.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/birth_death_sir.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/birth_death_sir.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/birth_death_sir.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/birth_death_sir.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/birth_death_sir.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/birth_death_sir.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/birth_death_sir.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/birth_death_sir.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/birth_death_sir.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/birth_death_sir.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/birth_death_sir.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/birth_death_sir.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/birth_death_sir.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/birth_death_sir.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/birth_death_sir.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/birth_death_sir.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/birth_death_sir.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/birth_death_sir.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/birth_death_sir.R", echo=TRUE)
phi <- user(0.005)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/birth_death_sir.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/birth_death_sir.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/birth_death_sir.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/birth_death_sir.R", echo=TRUE)
load("~/OneDrive - National University of Singapore/uk_mobility_data/data/deaths/england_death_2020.Rdata")       ## weekly data
View(death_data)
histogram(death_data[,1])
hist(death_data[,1])
hist(as.numeric(death_data[,1]))
library(stringr)
library(abind)
library(scales)
library(zoo)
library(matrixStats)
library(optparse)
library(ggplot2)
library(ggstance)
library(ggrepel)
library(bayesplot)
library(rstanarm)
load("~/OneDrive - National University of Singapore/uk_mobility_data/data/mobility/uk_ltla_mobility_matrix.Rdata")
load("~/OneDrive - National University of Singapore/uk_mobility_data/data/population/final_pop_2020_ltla.Rdata")
load("~/OneDrive - National University of Singapore/uk_mobility_data/data/deaths/england_death_2020.Rdata")       ## weekly data
death_data <- death_data %>% select(all_of(pop_2020$area_name))
death_data_length = nrow(death_data)
#death_data = death_data %>% mutate_all(~ replace(.,. == 0,1))
ltla_names <- colnames(mob_matrix_norm)
pop_2020 <- pop_2020 %>% arrange(match(area_name,ltla_names))
M_regions <- length(ltla_names)            #number of commercial area
pop <- pop_2020$population
C <- mob_matrix_norm
hist(death_data[,1])
hist(as.numeric(death_data[,1]))
death_data[, 1]
a <- death_data$Hartlepool
hist(a)
hist(a)
hist(matrix.flattened_matrix(death_data))
hist(matrix.flatten(death_data))
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/example1.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/example1 (1).R", echo=TRUE)
install.packages("COVID")
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/example1 (1).R", echo=TRUE)
install.packages("COVID19")
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/example1 (1).R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/example1 (2).R", echo=TRUE)
par(1,1)
par(mfrow(1,1)
)
par(mfrow = c(1,1))
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/uk_mobility_data/Code/fitting_death.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/MIDSEA/material/example1 (2).R", echo=TRUE)
load("~/OneDrive - National University of Singapore/uk_mobility_data/data/deaths/england_death_2020.Rdata")       ## weekly data
a <- death_data[,1]
hist(a)
hist(as.numeric(a))
a <- as.vector(death_data)
View(a)
as.matrix(death_data)
as.matrix(death_data)a <-
a <- as.matrix(death_data)
jpeg("~/Desktop/compressed_image.jpg", width = 800, height = 600, quality = 85)
jpeg("~/Desktop/pic_mousumi.jpg", width = 800, height = 600, quality = 85)
image <- image_read("~/Desktop/pic_mousumi.JPG")
image <- image_read("/Users/mousumi/Desktop/pic_mousumi.JPG")
library(magick)
image <- image_read("/Users/mousumi/Desktop/pic_mousumi.JPG")
compressed_image <- image_strip(image)
image_write(compressed_image, "pic_mousumi.jpg", quality = 85)
image_write(compressed_image, "/Users/mousumi/Desktop/pic_mousumi.jpg", quality = 85)
image <- image_read("/Users/mousumi/Desktop/pic_mousumi.JPG")
compressed_image <- image_strip(image)
image <- image_read(compressed_image,"/Users/mousumi/Desktop/pic_mousumi.JPG")
image_write(compressed_image, "/Users/mousumi/Desktop/pic_mousumi.jpg", quality = 85)
image_write(compressed_image, "/Users/mousumi/Download/pic_mousumi.jpg", quality = 85)
image_write(compressed_image, "/Users/mousumi/Downloads/pic_mousumi.jpg", quality = 85)
image <- image_read(compressed_image,"/Users/mousumi/Downloads/pic_mousumi.jpg")
image <- image_read("/Users/mousumi/Downloads/pic_mousumi.jpg")
compressed_image <- image_strip(image)
image <- image_read(compressed_image,"/Users/mousumi/Downloads/pic_mousumi.jpg")
image_write(compressed_image, "/Users/mousumi/Downloads/pic_mousumi.jpg", quality = 85)
image <- image_read("/Users/mousumi/Desktop/pic_mousumi.jpg")
compressed_image <- image_strip(image)
image_write(compressed_image, "/Users/mousumi/Downloads/pic_mousumi.jpg", quality = 85)
image_write(compressed_image, "/Users/mousumi/Downloads/pic_mousumi.jpg", quality = 50)
# the estimated infection at own region and at different regions due to the mobility
library(cmdstanr)
script_directory <- this.path::this.dir()
setwd(script_directory)
load("results/region_connected_rt_xyz.Rdata")
load("data/final_pop_2020_ltla.Rdata")
inf_start_date <- as.Date("27-01-2020",format = "%d-%m-%Y")
fitting_start <- as.Date("09-03-2020", format = "%d-%m-%Y")
end_date <- as.Date("31-12-2020", format = "%d-%m-%Y")
first_lockdown_start <- as.Date("2020-03-23", format = "%Y-%m-%d")
first_lockdown_end <- as.Date("2020-05-10", format = "%Y-%m-%d")
second_lockdown_start <- as.Date("2020-11-05", format = "%Y-%m-%d")
second_lockdown_end <- as.Date("2020-12-02", format = "%Y-%m-%d")
death_regions <- data.frame(stan_data_connected$death)
death_data_length <- stan_data_connected$death_data_length
death_regions$time <- seq(from=inf_start_date, to =  end_date, by = "week")
regions <- c("North East","North West","Yorkshire and the Humber","East Midlands","West Midlands","East","London","South East","South West")
fit <- fit_connected
Rt_connected <- fit$draws("Rt",format ="matrix")  # need to arrange
inf <- fit$draws("infection", format = "matrix")  # need to arrange
initial_seeding <- fit$draws("initial_seeding", format="matrix")
x1 <- fit$draws("x1", format ="matrix")
y1 <- fit$draws("y1", format ="matrix")
z1 <- fit$draws("z1", format ="matrix")
mu <- fit$draws("mu", format ="matrix")
weekly_var <- fit$draws("weekly_var", format = "matrix")
weekly_effect_d <- fit$draws("weekly_effect_d", format = "matrix")  # need to arrange
ifr_noise <- fit$draws("ifr_noise", format = "matrix")
final_time <- stan_data_connected$final_time
M_regions <- stan_data_connected$M_regions
# ------------- stan data arrange-------------------------------------------------------------
no_sample <- 200
infection <- array(data = NA, dim = c(final_time*M_regions, no_sample))
infection_in_own <- array(data = NA, dim = c(final_time*M_regions, no_sample))
infection_in_mob <- array(data = NA, dim = c(final_time*M_regions, no_sample))
infection_out_mob <- array(data = NA, dim = c(final_time*M_regions, no_sample))
weekly_deaths <- array(data = NA, dim = c(ceiling(final_time/7)*M_regions, no_sample))
m <- cmdstan_model("uk_region_simulation.stan")
rebuild_cmdstan()
# the estimated infection at own region and at different regions due to the mobility
library(cmdstanr)
m <- cmdstan_model("uk_region_simulation.stan")
ind <- sample(1:2000,no_sample)
for (k in 1:no_sample){
stan_data <- list(M_regions = stan_data_connected$M_regions,
final_time = stan_data_connected$final_time,
W = stan_data_connected$W,
gmobility = stan_data_connected$gmobility,
initial_seeding_day = stan_data_connected$initial_seeding_day,
initial_seeding = as.vector(initial_seeding[ind[k],]),
SI = stan_data_connected$SI,
f = stan_data_connected$f,
pop = stan_data_connected$pop,
C_base = stan_data_connected$C_base,
C_lockdown = stan_data_connected$C_lockdown,
Rt = matrix(Rt_connected[ind[k],],final_time,M_regions),
I = stan_data_connected$I,
ifr_noise = as.vector(ifr_noise[ind[k],]))
simulated_data <- m$sample(data =stan_data,
iter_sampling = 1,
chains = 1,
thin = 1,
fixed_param = TRUE)
infection[,k] <- as.matrix(simulated_data$draws("infection"))
infection_in_own[,k] <- as.matrix(simulated_data$draws("infection_in_own"))
infection_in_mob[,k] <- as.matrix(simulated_data$draws("infection_in_mob"))
infection_out_mob[,k] <- as.matrix(simulated_data$draws("infection_out_mob"))
weekly_deaths[,k] <- as.matrix(simulated_data$draws("weekly_deaths"))
}
