plot(posterior_fit4[,7])
plot(posterior_fit4[,7],xlim=(-1,1))
plot(posterior_fit4[,7],xlim=c(-1,1))
plot(posterior_fit4[,7],ylim=c(-1,1))
points(posterior_fit1[,7],ylim=c(-1,1),col="red")
plot(posterior_fit4[,1],ylim=c(0,5))
points(posterior_fit4[,2],ylim=c(0,5),col="red")
points(posterior_fit1[,1],ylim=c(0,5),col="blue")
points(posterior_fit2[,1],ylim=c(0,5),col="green")
points(posterior_fit3[,1],ylim=c(0,5),col="maroon")
death_data <- death_data %>% select(all_of(pop_2020$area_name))
load("data/final_pop_2020_ltla.Rdata")
load("data/england_death_2020.Rdata")       ## weekly data
load("data/uk_ltla_mobility_matrix.Rdata")
death_data <- death_data %>% select(all_of(pop_2020$area_name))
View(death_data)
apply(death_data,1,sum)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/code1/my_model/Spatial_transmission/uk_spatial/fittingcase.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/code1/my_model/Spatial_transmission/uk_spatial/fittingcase.R", echo=TRUE)
View(summary_fit)
View(summary_fit$summary)
View(posterior_fit)
var1 <- posterior_fit[,,7]
var2 <- posterior_fit[,,8]
View(var2)
hist(var1[,1])
hist(var1[,2])
week_1 <- posterior_fit[,,9]
plot(var1[,,1],week1[,,1])
plot(var1[,1],week1[,1])
plot(var1[,1],week_1[,1])
plot(var1[,2],week_1[,2])
parnames <- names(out)
parnames
View(out)
pairs(fit,pars = c("weekly_var"))
pairs(fit,pars = weekly_effect_d[,1:4,1])
pairs(fit,pars = "weekly_effect_d")
library(rstan)
library(data.table)
library(lubridate)
library(gdata)
library(dplyr)
library(tidyr)
library(EnvStats)
library(scales)
library(stringr)
library(abind)
library(scales)
library(bayesplot)
library(ggplot2)
#library(rstanarm)
library(this.path)
#
script_directory <- this.path::this.dir()
setwd(script_directory)
load("data/final_pop_2020_ltla.Rdata")
load("data/england_death_2020.Rdata")       ## weekly data
load("data/uk_ltla_mobility_matrix.Rdata")
death_data <- death_data %>% select(all_of(pop_2020$area_name))
death_data$total_death <- apply(death_data,1, sum)
death_threshold <- which(death_data$total_death > 10 )[1]
infection_start <- date(death_threshold) - 4(week)
death_threshold <- which(death_data$total_death > 10 )
death_threshold <- which(death_data$total_death > 10 )[1]
View(death_data)
death_threshold <- which(death_data$total_death > 10 )[1] -1
day <- weekday("01-01-2020")
day <- weekdays("01-01-2020")
day <- weekdays(as.date("01-01-2020"))
day <- weekdays(as.Date("01-01-2020"))
starting_day_2020 <- as.integer(trftime(as.Date("01-01-2020"),format = "%u"))
starting_day_2020 <- as.integer(strftime(as.Date("01-01-2020"),format = "%u"))
starting_day_2020 <- as.integer(strftime(as.Date("01-01-2020",format="%d-%m-%y"),format = "%u"))
starting_day_2020 <- as.integer(strftime(as.Date("08-01-2020",format="%d-%m-%y"),format = "%u"))
starting_day_2020 <- as.integer(strftime(as.Date("01-01-2020",format="%d-%m-%y")+1,format = "%u"))
date <- as.Date("2020-01-08")
# Determine the day of the week as an integer (1 = Monday, 7 = Sunday)
day_of_week <- as.integer(strftime(date, format = "%u"))
# Calculate the date of the Monday of that week
first_day_of_week <- date - (day_of_week - 1)
starting_day_2020 <- as.integer(strftime(as.Date("01-01-2020",format="%d-%m-%y"),format = "%u"))
start_of_year <- as.Date("01-01-2020",format="%d-%m-%y")
starting_day_2020 <- as.integer(strftime(start_of_year,format = "%u"))
firt_monday_2020 <- start_of_year - (day_of_week - 1)
inf_start <- threshold_week - 4
threshold_week <- which(death_data$total_death > 10 )[1] -1      #the index of that week
inf_start <- threshold_week - 4
start_of_year <- as.Date("01-01-2020",format="%d-%m-%y")
starting_day_2020 <- as.integer(strftime(start_of_year,format = "%u"))
firt_monday_2020 <- start_of_year - (start_ind_2020 - 1)
start_ind_2020 <- as.integer(strftime(start_of_year,format = "%u"))
firt_monday_2020 <- start_of_year - (start_ind_2020 - 1)
first_monday_2020 <- start_of_year - (start_ind_2020 - 1)
inf_start_date <- first_monday_2020 + (inf_start_week*7)
inf_start_date <- first_monday_2020 + (inf_start_week*7)
inf_start_week <- threshold_week - 4
inf_start_date <- first_monday_2020 + (inf_start_week*7)
a <- as.integer(strftime(inf_start_week,format = "%u"))
as.integer(strftime(first_monday_2020,format = "%u"))
inf_start_date <- first_monday_2020 + (inf_start_week*7)
as.integer(strftime(inf_start_date,format = "%u"))
final_time <- as.numeric(difftime(end_of_year , inf_start_date, units = "days"))
end_of_year <- as.Date("31-12-2020",format = "%d-%m-%y")
final_time <- as.numeric(difftime(end_of_year , inf_start_date, units = "days"))
death_data <- death_data[inf_start_week:nrow(death_data),1:2]   #(adjust accordingly)
View(death_data)
load("data/final_pop_2020_ltla.Rdata")
load("data/england_death_2020.Rdata")       ## weekly data
load("data/uk_ltla_mobility_matrix.Rdata")
# load("~/mousumi_codes/uk_spatial/data/final_pop_2020_ltla.Rdata")
# load("~/mousumi_codes/uk_spatial/data/england_death_2020.Rdata")
# load("~/mousumi_codes/uk_spatial/data/uk_ltla_mobility_matrix.Rdata")
death_data <- death_data %>% select(all_of(pop_2020$area_name))
View(death_data)
death_data$total_death <- apply(death_data,1, sum)
View(death_data)
threshold_week <- which(death_data$total_death > 10 )[1] -1      #the index of that week
inf_start_week <- threshold_week - 4
start_of_year <- as.Date("01-01-2020",format="%d-%m-%y")
start_ind_2020 <- as.integer(strftime(start_of_year,format = "%u"))
first_monday_2020 <- start_of_year - (start_ind_2020 - 1)
inf_start_date <- first_monday_2020 + (inf_start_week*7)
end_of_year <- as.Date("31-10-2020",format = "%d-%m-%y")
final_time <- as.numeric(difftime(end_of_year , inf_start_date, units = "days"))
death_data <- death_data[inf_start_week:(inf_start_week+(final_time/7)),1:2]   #(adjust accordingly)
View(death_data)
start_of_year <- as.Date("01-01-2020",format="%d-%m-%y")
start_ind_2020 <- as.integer(strftime(start_of_year,format = "%u"))
first_monday_2020 <- start_of_year - (start_ind_2020 - 1)
inf_start_date <- first_monday_2020 + (inf_start_week*7)
end_of_year <- as.Date("30-09-2020",format = "%d-%m-%y")
final_time <- as.numeric(difftime(end_of_year , inf_start_date, units = "days"))
death_data <- death_data[inf_start_week:(inf_start_week+(final_time/7)),1:2]   #(adjust accordingly)
View(death_data)
inf_start_week
(inf_start_week+(final_time/7))
(inf_start_week+floor(final_time/7))
death_data <- death_data[inf_start_week:(inf_start_week+floor(final_time/7)),1:2]   #(adjust accordingly)
View(death_data)
View(death_data)
load("data/final_pop_2020_ltla.Rdata")
load("data/england_death_2020.Rdata")       ## weekly data
load("data/uk_ltla_mobility_matrix.Rdata")
# load("~/mousumi_codes/uk_spatial/data/final_pop_2020_ltla.Rdata")
# load("~/mousumi_codes/uk_spatial/data/england_death_2020.Rdata")
# load("~/mousumi_codes/uk_spatial/data/uk_ltla_mobility_matrix.Rdata")
death_data <- death_data %>% select(all_of(pop_2020$area_name))
death_data$total_death <- apply(death_data,1, sum)
threshold_week <- which(death_data$total_death > 10 )[1] -1      #the index of that week
inf_start_week <- threshold_week - 4
start_of_year <- as.Date("01-01-2020",format="%d-%m-%y")
start_ind_2020 <- as.integer(strftime(start_of_year,format = "%u"))
first_monday_2020 <- start_of_year - (start_ind_2020 - 1)
inf_start_date <- first_monday_2020 + (inf_start_week*7)
end_of_year <- as.Date("30-09-2020",format = "%d-%m-%y")
final_time <- as.numeric(difftime(end_of_year , inf_start_date, units = "days"))
death_data <- death_data[inf_start_week:(inf_start_week+floor(final_time/7)),1:2]   #(adjust accordingly)
View(death_data)
load("data/final_pop_2020_ltla.Rdata")
load("data/england_death_2020.Rdata")       ## weekly data
load("data/uk_ltla_mobility_matrix.Rdata")
# load("~/mousumi_codes/uk_spatial/data/final_pop_2020_ltla.Rdata")
# load("~/mousumi_codes/uk_spatial/data/england_death_2020.Rdata")
# load("~/mousumi_codes/uk_spatial/data/uk_ltla_mobility_matrix.Rdata")
death_data <- death_data %>% select(all_of(pop_2020$area_name))
death_data$total_death <- apply(death_data,1, sum)
threshold_week <- which(death_data$total_death > 10 )[1] -1      #the index of that week
inf_start_week <- threshold_week - 4
start_of_year <- as.Date("01-01-2020",format="%d-%m-%y")
start_ind_2020 <- as.integer(strftime(start_of_year,format = "%u"))
first_monday_2020 <- start_of_year - (start_ind_2020 - 1)
inf_start_date <- first_monday_2020 + (inf_start_week*7)
end_of_year <- as.Date("30-07-2020",format = "%d-%m-%y")
final_time <- as.numeric(difftime(end_of_year , inf_start_date, units = "days"))
death_data <- death_data[inf_start_week:(inf_start_week+floor(final_time/7)),1:2]   #(adjust accordingly)
View(death_data)
M_regions <-10     #ncol(death_data)     # number of region
C <- mob_matrix_norm[1:10,1:10]    # mobility matrix for two regions
for (ind in 1:M_regions){
C[ind,ind] <- 1-sum(C[,ind])
}
colSums(C)
C <- mob_matrix_norm[1:M_regions,1:M_regions]    # mobility matrix for two regions
for (ind in 1:M_regions){
C[ind,ind] <- 1-(sum(C[,ind])-C[ind,ind])
}
colSums(C)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/code1/my_model/Spatial_transmission/uk_spatial/fittingcase.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/code1/my_model/Spatial_transmission/uk_spatial/fittingcase.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/code1/my_model/Spatial_transmission/uk_spatial/fittingcase.R", echo=TRUE)
posterior_fit <- as.array(fit)
View(posterior_fit)
View(posterior_fit[,1,])
summary_fit <- summary(fit)
View(summary_fit)
View(summary_fit$summary)
# Example in R using rstan
m <- rstan::stan_model(file="fittingcase_zro_inf.stan")
# Example in R using rstan
m <- rstan::stan_model(file="fittingcase_zro_inf.stan")
# Example in R using rstan
m <- rstan::stan_model(file="fittingcase_zro_inf.stan")
# Example in R using rstan
m <- rstan::stan_model(file="fittingcase_zro_inf.stan")
# Example in R using rstan
m <- rstan::stan_model(file="fittingcase_zro_inf.stan")
# Example in R using rstan
m <- rstan::stan_model(file="fittingcase_zro_inf.stan")
# Example in R using rstan
m <- rstan::stan_model(file="fittingcase_zro_inf.stan")
fit = rstan::sampling(
object=m,
data=stan_data,
iter=2000,
warmup=1000,
chains=4,
thin=1,
seed=1234,
control = list(adapt_delta = 0.9, max_treedepth = 10))     # adapt_delta controls acceptance probability (lower -> larger step size, higher acceptance rate, less time, less explored posterior distribution
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/code1/my_model/Spatial_transmission/uk_spatial/fittingcase.R", echo=TRUE)
week/2
floor(week/2)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/code1/my_model/Spatial_transmission/uk_spatial/fittingcase.R", echo=TRUE)
death=death_data[seq(1,nrow(death_data),by=2),]
floor(week/2)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/code1/my_model/Spatial_transmission/uk_spatial/fittingcase.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/code1/my_model/Spatial_transmission/uk_spatial/fittingcase.R", echo=TRUE)
#pairs(fit,pars = "weekly_effect_d")
posterior_fit <- as.array(fit)       # for posterior distribution
summary_fit <- summary(fit)
View(summary_fit$summary)
Rhat <- summary_fit$summary[,"Rhat"]
ess_bulk <- summary_fit$summary[,"n_eff"]
Rhat
par(mfrow = c(2, 1), mai=c(0.8,1,0.2,0.3))
##.  plotting rt.  ###############################################
rt_samples <- out$Rt
mean_rt <- apply(rt_samples[,,1],2,mean)
ci_rt <- apply(rt_samples,2,quantile,c(0.05,0.95))
plot(seq(length(mean_rt)),mean_rt,type='l',col='red',xlab="",ylab="Rt")
grid(nx = 5, ny =NA ,lty = 2,col = "gray",lwd = 2)
polygon(c(1:length(mean_rt), rev(1:length(mean_rt))),
c(ci_rt[1, ], rev(ci_rt[2, ])),
col = rgb(1, 0, 0, 0.1), border = NA)
abline(a=1,b=0,h=1)
#######.  plotting cases.... the model fitting data ####################################
death_samples <- out$weekly_deaths
mean_deaths1 <- apply(death_samples[,,1],2,mean)
plot(death_data$Hartlepool,xlab="Time(week)",ylab=paste("Weekly deaths","\n", colnames(death_data)[1]))
lines(mean_deaths1,col="red")
ci_deaths <- apply(death_samples,2,quantile,c(0.05,0.95))
grid(nx = 5, ny = NA,lty = 2,col = "gray",lwd = 2)
polygon(c(1:length(mean_deaths1), rev(1:length(mean_deaths1))),
c(ci_deaths[1, ], rev(ci_deaths[2, ])),
col = rgb(1, 0, 0, 0.1), border = NA)
points(week,incidence_data_week)
par(mfrow = c(1, 1) )
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/code1/my_model/Spatial_transmission/uk_spatial/fittingcase.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/code1/my_model/Spatial_transmission/uk_spatial/fittingcase.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/code1/my_model/Spatial_transmission/uk_spatial/fittingcase.R", echo=TRUE)
ncol(death_data)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/code1/my_model/Spatial_transmission/uk_spatial/fittingcase.R", echo=TRUE)
load("data/final_pop_2020_ltla.Rdata")
load("data/england_death_2020.Rdata")       ## weekly data
load("data/final_pop_2020_ltla.Rdata")
load("data/england_death_2020.Rdata")       ## weekly data
load("data/uk_regions_mobility_matrix.Rdata")
load("data/uk_regions_mobility_matrix.Rdata")
death_data <- death_data %>% select(all_of(pop_2020$area_name))
View(mobmatrix_region_norm)
load("data/england_death_2020.Rdata")       ## weekly data
death_data <- death_data %>% select(all_of(pop_2020$area_name))
north_east_index <- which(pop_2020$region == "North east")
north_west_index <- which(pop_2020$region == "North west")
yorkshire_index <- which(pop_2020$region == "Yorkshire and the humber")
east_midlands_index <- which(pop_2020$region == "East midlands")
west_midlands_index <- which(pop_2020$region == "West midlands")
east_index <- which(pop_2020$region == "East")
london_index <- which(pop_2020$region == "London")
south_east_index <- which(pop_2020$region == "South east")
south_west_index <- which(pop_2020$region == "South west")
north_east_data <- death_data[,c(north_east_index,ncol(death_data))]
View(north_east_data)
View(pop_2020)
View(death_data)
load("data/england_death_2020.Rdata")       ## weekly data
View(death_data)
north_east = death_data[,north_east_index]
north_east
north_east = apply(death_data[,north_east_index],1,sum)
north_east
death_regions <- data.frame(north_east = apply(death_data[,north_east_index],1,sum),
north_west = apply(death_data[,north_west_index],1,sum),
yorkshire = apply(death_data[,yorkshire_index],1,sum),
east_midlands = apply(death_data[,east_midlands_index],1,sum),
west_midlands = apply(death_data[,west_midlands_index],1,sum),
east = apply(death_data[,east_index],1,sum),
london = apply(death_data[,london_index],1,sum),
south_east = apply(death_data[,south_east_index],1,sum),
south_west = apply(death_data[,south_west_index],1,sum))
View(death_regions)
View(pop_2020)
pop_2020$region <- sapply(pop_2020$region, function(x){
paste0(toupper(substring(x,1,1)),tolower(substring(x,2)))})
death_data <- death_data %>% select(all_of(pop_2020$area_name))
north_east_index <- which(pop_2020$region == "North east")
north_west_index <- which(pop_2020$region == "North west")
yorkshire_index <- which(pop_2020$region == "Yorkshire and the humber")
east_midlands_index <- which(pop_2020$region == "East midlands")
west_midlands_index <- which(pop_2020$region == "West midlands")
east_index <- which(pop_2020$region == "East")
london_index <- which(pop_2020$region == "London")
south_east_index <- which(pop_2020$region == "South east")
south_west_index <- which(pop_2020$region == "South west")
death_regions <- data.frame(north_east = apply(death_data[,north_east_index],1,sum),
north_west = apply(death_data[,north_west_index],1,sum),
yorkshire = apply(death_data[,yorkshire_index],1,sum),
east_midlands = apply(death_data[,east_midlands_index],1,sum),
west_midlands = apply(death_data[,west_midlands_index],1,sum),
east = apply(death_data[,east_index],1,sum),
london = apply(death_data[,london_index],1,sum),
south_east = apply(death_data[,south_east_index],1,sum),
south_west = apply(death_data[,south_west_index],1,sum))
View(death_regions)
pop_region <- data.frame(regions = unique(pop_2020$region))
View(pop_2020)
View(pop_region)
population_region <- rep(0,nrow(pop_region))
for (i in 1:length(nrow(pop_region))){
population_region[i] = sum(pop_2020$population[pop_2020$region == pop_region[i]])
}
View(pop_region)
population_region <- rep(0,nrow(pop_region))
for (i in 1:length(nrow(pop_region))){
population_region[i] = sum(pop_2020$population[pop_2020$region == pop_region$regions[i]])
}
population_region
nrow(pop_region)
i
i=2
pop_region$regions[i]
sum(pop_2020$population[pop_2020$region == pop_region$regions[i]])
for (i in 1:nrow(pop_region)){
population_region[i] = sum(pop_2020$population[pop_2020$region == pop_region$regions[i]])
}
population_region
pop_region$population <- population_region
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/code1/my_model/Spatial_transmission/uk_spatial/fitting/fitting_regions.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/code1/my_model/Spatial_transmission/uk_spatial/fitting_regions.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/code1/my_model/Spatial_transmission/uk_spatial/fitting_regions.R", echo=TRUE)
final_time <- as.numeric(difftime(end_of_year , start_of_year, units = "days"))
M_regions <-ncol(death_regions)-1     # number of region
death_regions <- death_regions[inf_start_week:(inf_start_week+floor(final_time/7)),1:M_regions]   #(adjust accordingly)
View(death_regions)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/code1/my_model/Spatial_transmission/uk_spatial/fitting_regions.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/code1/my_model/Spatial_transmission/uk_spatial/fitting_regions.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/code1/my_model/Spatial_transmission/uk_spatial/fitting_regions.R", echo=TRUE)
library(rstan)
library(data.table)
library(lubridate)
library(gdata)
library(dplyr)
library(tidyr)
library(EnvStats)
library(scales)
library(stringr)
library(abind)
library(scales)
library(bayesplot)
library(ggplot2)
#library(rstanarm)
library(this.path)
#
script_directory <- this.path::this.dir()
setwd(script_directory)
load("data/final_pop_2020_ltla.Rdata")
load("data/england_death_2020.Rdata")       ## weekly data
load("data/uk_regions_mobility_matrix.Rdata")
# load("~/mousumi_codes/uk_spatial/data/final_pop_2020_ltla.Rdata")
# load("~/mousumi_codes/uk_spatial/data/england_death_2020.Rdata")
# load("~/mousumi_codes/uk_spatial/data/uk_ltla_mobility_matrix.Rdata")
pop_2020$region <- sapply(pop_2020$region, function(x){
paste0(toupper(substring(x,1,1)),tolower(substring(x,2)))})
death_data <- death_data %>% select(all_of(pop_2020$area_name))
#------- region_pop -----------------------------------------------------------------
pop_region <- data.frame(regions = unique(pop_2020$region))
population_region <- rep(0,nrow(pop_region))
for (i in 1:nrow(pop_region)){
population_region[i] = sum(pop_2020$population[pop_2020$region == pop_region$regions[i]])
}
pop_region$population <- population_region
#------- regions index -----------------------------------------------------------------
north_east_index <- which(pop_2020$region == "North east")
north_west_index <- which(pop_2020$region == "North west")
yorkshire_index <- which(pop_2020$region == "Yorkshire and the humber")
east_midlands_index <- which(pop_2020$region == "East midlands")
west_midlands_index <- which(pop_2020$region == "West midlands")
east_index <- which(pop_2020$region == "East")
london_index <- which(pop_2020$region == "London")
south_east_index <- which(pop_2020$region == "South east")
south_west_index <- which(pop_2020$region == "South west")
#-------- region wise death --------------------------------------------------------------
death_regions <- data.frame(north_east = apply(death_data[,north_east_index],1,sum),
north_west = apply(death_data[,north_west_index],1,sum),
yorkshire = apply(death_data[,yorkshire_index],1,sum),
east_midlands = apply(death_data[,east_midlands_index],1,sum),
west_midlands = apply(death_data[,west_midlands_index],1,sum),
east = apply(death_data[,east_index],1,sum),
london = apply(death_data[,london_index],1,sum),
south_east = apply(death_data[,south_east_index],1,sum),
south_west = apply(death_data[,south_west_index],1,sum))
death_regions$total_death <- apply(death_data,1, sum)
View(C)
View(death_data)
View(death_regions)
week <- nrow(death_regions)
final_time = 7*week
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/code1/my_model/Spatial_transmission/uk_spatial/fitting_regions.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/code1/my_model/Spatial_transmission/uk_spatial/fitting_regions.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/code1/my_model/Spatial_transmission/uk_spatial/fitting_regions.R", echo=TRUE)
library(rstan)
library(data.table)
library(lubridate)
library(gdata)
library(dplyr)
library(tidyr)
library(EnvStats)
library(scales)
library(stringr)
library(abind)
library(scales)
library(bayesplot)
library(ggplot2)
#library(rstanarm)
library(this.path)
#
script_directory <- this.path::this.dir()
setwd(script_directory)
load("data/final_pop_2020_ltla.Rdata")
load("data/england_death_2020.Rdata")       ## weekly data
load("data/uk_regions_mobility_matrix.Rdata")
# load("~/mousumi_codes/uk_spatial/data/final_pop_2020_ltla.Rdata")
# load("~/mousumi_codes/uk_spatial/data/england_death_2020.Rdata")
# load("~/mousumi_codes/uk_spatial/data/uk_ltla_mobility_matrix.Rdata")
pop_2020$region <- sapply(pop_2020$region, function(x){
paste0(toupper(substring(x,1,1)),tolower(substring(x,2)))})
death_data <- death_data %>% select(all_of(pop_2020$area_name))
#------- region_pop -----------------------------------------------------------------
pop_region <- data.frame(regions = unique(pop_2020$region))
population_region <- rep(0,nrow(pop_region))
for (i in 1:nrow(pop_region)){
population_region[i] = sum(pop_2020$population[pop_2020$region == pop_region$regions[i]])
}
pop_region$population <- population_region
#------- regions index -----------------------------------------------------------------
north_east_index <- which(pop_2020$region == "North east")
north_west_index <- which(pop_2020$region == "North west")
yorkshire_index <- which(pop_2020$region == "Yorkshire and the humber")
east_midlands_index <- which(pop_2020$region == "East midlands")
west_midlands_index <- which(pop_2020$region == "West midlands")
east_index <- which(pop_2020$region == "East")
london_index <- which(pop_2020$region == "London")
south_east_index <- which(pop_2020$region == "South east")
south_west_index <- which(pop_2020$region == "South west")
#-------- region wise death --------------------------------------------------------------
death_regions <- data.frame(north_east = apply(death_data[,north_east_index],1,sum),
north_west = apply(death_data[,north_west_index],1,sum),
yorkshire = apply(death_data[,yorkshire_index],1,sum),
east_midlands = apply(death_data[,east_midlands_index],1,sum),
west_midlands = apply(death_data[,west_midlands_index],1,sum),
east = apply(death_data[,east_index],1,sum),
london = apply(death_data[,london_index],1,sum),
south_east = apply(death_data[,south_east_index],1,sum),
south_west = apply(death_data[,south_west_index],1,sum))
View(death_regions)
View(pop_2020)
View(pop_region)
View(mobmatrix_region_norm)
View(pop_region)
# # inf_start_date <- first_monday_2020 + (inf_start_week*7)
#
# end_of_year <- as.Date("31-12-2020",format = "%d-%m-%y")
#
# final_time <- as.numeric(difftime(end_of_year , start_of_year, units = "days"))
#
#
# M_regions <-ncol(death_regions)-1     # number of region
#
# death_regions <- death_regions[inf_start_week:(inf_start_week+floor(final_time/7)),1:M_regions]   #(adjust accordingly)
week <- nrow(death_regions)
C <- mobmatrix_region_norm[1:M_regions,1:M_regions]    # mobility matrix
# start_of_year <- as.Date("01-01-2020",format="%d-%m-%y")
# # start_ind_2020 <- as.integer(strftime(start_of_year,format = "%u"))
# # first_monday_2020 <- start_of_year - (start_ind_2020 - 1)
# # inf_start_date <- first_monday_2020 + (inf_start_week*7)
#
# end_of_year <- as.Date("31-12-2020",format = "%d-%m-%y")
#
# final_time <- as.numeric(difftime(end_of_year , start_of_year, units = "days"))
#
#
M_regions <-ncol(death_regions)#-1     # number of region
#
# death_regions <- death_regions[inf_start_week:(inf_start_week+floor(final_time/7)),1:M_regions]   #(adjust accordingly)
week <- nrow(death_regions)
C <- mobmatrix_region_norm[1:M_regions,1:M_regions]    # mobility matrix
final_time = 7*week
initial_seeding_day = 6
# initial_seeding = rep(5,M_regions)
pop = pop_2020$population[1:M_regions]
source("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/Singapore/code1/my_model/Spatial_transmission/uk_spatial/fitting_regions.R", echo=TRUE)
